<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker-swarm</title>
    <url>/2023/03/30/Docker-swarm/</url>
    <content><![CDATA[<p>基于docker swarm 构建 docker 集群</p>
<h1 id="前置条件docker服务器三台，一台ntp时间服务器116"><a href="#前置条件docker服务器三台，一台ntp时间服务器116" class="headerlink" title="前置条件docker服务器三台，一台ntp时间服务器116"></a>前置条件docker服务器三台，一台ntp时间服务器116</h1><ul>
<li>116 ntp 时间服务器</li>
<li>224 docker 主节点</li>
<li>225 docker 从节点</li>
<li>226 docker 从节点<h1 id="docker-swarm-常用命令"><a href="#docker-swarm-常用命令" class="headerlink" title="docker swarm 常用命令"></a>docker swarm 常用命令</h1></li>
<li>docker swarm init 生成主网络</li>
<li>docker node ls 查看进入的网络</li>
<li>docker swarm join-token worker 产看主网络的，进入方式 <h1 id="搭建Portainer-服务部署"><a href="#搭建Portainer-服务部署" class="headerlink" title="搭建Portainer 服务部署"></a>搭建Portainer 服务部署</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /opt/portainer</span><br><span class="line">$ curl -L https://downloads.portainer.io/portainer-agent-stack.yml -o /opt/portainer/portainer-agent-stack.yml</span><br><span class="line">$ docker stack deploy -c /opt/portainer/portainer-agent-stack.yml portainer</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="构建自动化docker-构建"><a href="#构建自动化docker-构建" class="headerlink" title="构建自动化docker 构建"></a>构建自动化docker 构建</h1><ul>
<li>docker swarm init –advertise-addr=192.168.90.224</li>
<li>依据上面的提示操作</li>
<li>docker pull alpine:latest</li>
<li>docker network create -d overlay  –attachable –subnet=174.18.0.0/24  mynetwork1</li>
<li>docker run –privileged -itd –name alpine1 –network=mynetwork1 –ip=174.18.0.10  alpine:latest</li>
<li>docker run –privileged -itd –name alpine1 –network=mynetwork1 –ip=174.18.0.11  alpine:latest</li>
<li>docker run –privileged -itd –name alpine1 –network=mynetwork1 –ip=174.18.0.12  alpine:latest</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>devopts</title>
    <url>/2023/04/17/devopts/</url>
    <content><![CDATA[<h1 id="docker-集群化"><a href="#docker-集群化" class="headerlink" title="docker 集群化"></a>docker 集群化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker swarm init</span><br></pre></td></tr></table></figure>

<h1 id="创建网络-public-集群网络"><a href="#创建网络-public-集群网络" class="headerlink" title="创建网络 public 集群网络"></a>创建网络 public 集群网络</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker network create -d overlay public</span><br></pre></td></tr></table></figure>

<h1 id="安装-Portainer"><a href="#安装-Portainer" class="headerlink" title="安装 Portainer"></a>安装 Portainer</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /opt/portainer</span><br><span class="line">$ curl -L https://downloads.portainer.io/portainer-agent-stack.yml -o /opt/portainer/portainer-agent-stack.yml</span><br><span class="line">$ docker stack deploy -c /opt/portainer/portainer-agent-stack.yml portainer</span><br></pre></td></tr></table></figure>

<h1 id="portainer-agent-stack-yml"><a href="#portainer-agent-stack-yml" class="headerlink" title="portainer-agent-stack.yml"></a>portainer-agent-stack.yml</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/agent:2.11.1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/volumes:/var/lib/docker/volumes</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">agent_network</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.platform.os</span> <span class="string">==</span> <span class="string">linux</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer-ce:2.11.1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-H</span> <span class="string">tcp://tasks.agent:9001</span> <span class="string">--tlsskipverify</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9443:9443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">portainer_data:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">agent_network</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">agent_network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">attachable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">portainer_data:</span></span><br></pre></td></tr></table></figure>

<h1 id="使用-portainer-的"><a href="#使用-portainer-的" class="headerlink" title="使用 portainer 的"></a>使用 portainer 的</h1><ul>
<li>创建 mysql 挂载区 infrastructure_mysql</li>
</ul>
<h1 id="创建-infrastructure-的-stack-编排-mysql-redis-gitea-registry-2-drone-server-drone-runner"><a href="#创建-infrastructure-的-stack-编排-mysql-redis-gitea-registry-2-drone-server-drone-runner" class="headerlink" title="创建 infrastructure 的 stack 编排 mysql,redis,gitea,registry:2,drone-server,drone-runner;"></a>创建 infrastructure 的 stack 编排 mysql,redis,gitea,registry:2,drone-server,drone-runner;</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.4&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_bin</span> <span class="string">--default-storage-engine=INNODB</span> <span class="string">--max_allowed_packet=256M</span> <span class="string">--innodb_log_file_size=2GB</span> <span class="string">--transaction-isolation=READ-COMMITTED</span> <span class="string">--binlog_format=row</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infrastructure_mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">joyadata</span></span><br><span class="line">    <span class="attr">security_opt:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">seccomp:unconfined</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">gitea:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:1.16.8</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infrastructure_gitea:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APP_NAME=joyadata</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">RUN_MODE=prod</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOMAIN=192.168.80.81</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ROOT_URL=http://192.168.80.81</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_SSH=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENABLE_GZIP=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SSH_PORT=2222</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_REGISTRATION=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REQUIRE_SIGNIN_VIEW=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_UID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER_GID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_TYPE=mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=mysql:3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASSWD=joyadata</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry:2</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infrastructure_registry:/var/lib/registry</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">drone-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_TLS_AUTOCERT=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_AGENTS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITLAB_SERVER=http://192.168.80.81</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITLAB_CLIENT_ID=40fa9b43d59e55f0647e74d02e936491794c938c735f756e027d0e867cff3417</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GITLAB_CLIENT_SECRET=ee4faa0bf5a4881c2279c0bfe6c0232a44e338bb996ef0451a81049bcf783fd0</span></span><br><span class="line">      <span class="comment"># - DRONE_GITEA_SERVER=http://192.168.90.227</span></span><br><span class="line">      <span class="comment"># - DRONE_GITEA_CLIENT_ID=c74770c2-6cfb-4029-b1e7-90f09da8a86b</span></span><br><span class="line">      <span class="comment"># - DRONE_GITEA_CLIENT_SECRET=spVZFjhiIk7XldgpI7V2qJU5zbSMu27R9rpmewgz9Jm1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=839b342d807efefcefc4c38a4b5fc531</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=http://192.168.90.227:7300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7300</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">infrastructure_drone:/data</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">drone-runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">drone/drone-runner-docker:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_PROTO=http</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_HOST=192.168.90.227:7300</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RPC_SECRET=839b342d807efefcefc4c38a4b5fc531</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_API_VERSION=1.39</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DRONE_RUNNER_NAME=AGENT-CCTOMATO-001</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">gitlab/gitlab-ce:latest</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">infrastructure_gitlab:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">infrastructure_gitlab_log:/var/log/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">infrastructure_gitlab_opt:/var/opt/gitlab</span></span><br><span class="line">      <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">2224</span><span class="string">:22</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">&quot;external_url &#x27;http://192.168.80.81&#x27;;gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;192.168.80.81&#x27;;gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2224&quot;</span></span><br><span class="line">      <span class="attr">deploy:</span></span><br><span class="line">        <span class="attr">placement:</span></span><br><span class="line">          <span class="attr">constraints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="comment"># image: jenkinsci/blueocean:1.25.6</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jenkins/jenkins</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jenkins_home:/var/jenkins_home</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.role==manager</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">public:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">infrastructure_mysql:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">infrastructure_gitea:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">infrastructure_registry:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">infrastructure_drone:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jenkins_home:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="registry2-配置"><a href="#registry2-配置" class="headerlink" title="registry2 配置"></a>registry2 配置</h1><ul>
<li>创建 vi /etc/docker/daemon.json</li>
<li>写入 { “insecure-registries”:[“192.168.80.81:5000”] }</li>
<li>systemctl daemon-reload</li>
<li>systemctl restart docker</li>
<li>docker pull alpine:latest</li>
<li>docker tag alpine:latest 192.168.90.227:5000/alpine:v1</li>
<li>docker push 192.168.90.227:5000/alpine:v1</li>
<li>docker push 192.168.90.227:5000/alpine:v1</li>
</ul>
<h1 id="drone-yml-测试文件"><a href="#drone-yml-测试文件" class="headerlink" title=".drone.yml 测试文件"></a>.drone.yml 测试文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind: pipeline</span><br><span class="line">type: docker</span><br><span class="line">name: default</span><br><span class="line"></span><br><span class="line">steps:</span><br><span class="line">- name: greeting</span><br><span class="line">  image: alpine</span><br><span class="line">  commands:</span><br><span class="line">  - echo hello</span><br><span class="line">  - echo world</span><br></pre></td></tr></table></figure>

<h1 id="前端文件-drone-yml"><a href="#前端文件-drone-yml" class="headerlink" title="前端文件.drone.yml"></a>前端文件.drone.yml</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">pipeline</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:14.16.1</span></span><br><span class="line">    <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">--registry=http://192.168.90.126:8081/repository/joyadata-npm-group/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">config</span> <span class="string">set</span> <span class="string">registry</span> <span class="string">http://192.168.90.126:8081/repository/joyadata-npm-group/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plugins/docker</span></span><br><span class="line">    <span class="attr">settings:</span></span><br><span class="line">      <span class="attr">repo:</span> <span class="number">192.168</span><span class="number">.90</span><span class="number">.227</span><span class="string">:5000/project/pdweb</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="number">192.168</span><span class="number">.90</span><span class="number">.227</span><span class="string">:5000</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">force_tag:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure>

<h1 id="前端配套的-Dockerfile"><a href="#前端配套的-Dockerfile" class="headerlink" title="前端配套的 Dockerfile"></a>前端配套的 Dockerfile</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h1 id="default-conf"><a href="#default-conf" class="headerlink" title="default.conf"></a>default.conf</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  127.0.0.1;</span><br><span class="line">  absolute_redirect off;</span><br><span class="line">  # 页面路径</span><br><span class="line">  location &#x2F;pd&#x2F;page  &#123;</span><br><span class="line">    alias &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;;</span><br><span class="line">  &#125;</span><br><span class="line">  # 后台接口</span><br><span class="line">  location &#x2F;pd&#x2F; &#123;</span><br><span class="line">    proxy_pass   http:&#x2F;&#x2F;192.168.90.101:9200&#x2F;pd&#x2F;;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarder-For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log notice;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#stream服务</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format  main  &#39;$remote_addr [$time_local] &#39;</span><br><span class="line">                 &#39;$protocol $status $bytes_sent $bytes_received &#39;</span><br><span class="line">                 &#39;$session_time&#39;;</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;stream-access.log main;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.stream;</span><br><span class="line">&#125;</span><br><span class="line">#tcp服务</span><br><span class="line">http &#123;</span><br><span class="line">  include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">  default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">  log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                    &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">  access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">  sendfile        on;</span><br><span class="line">  #tcp_nopush     on;</span><br><span class="line">  server_tokens off; #隐藏服务器的版本</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  fastcgi_buffers 8 102400k;</span><br><span class="line">  tcp_nodelay on;  #提高i&#x2F;o性能，可以设置在http，server，location字段标签里</span><br><span class="line">  client_max_body_size 50m;  #默认是1m，上传文件大小的限制</span><br><span class="line">  client_header_timeout 1000; #默认60s，读取客户端请求头数据的超时时间，若超过这个时间，客户端还没有发送完整的header数据，服务器端将返回&quot;Request timo out(408)&quot;错误。</span><br><span class="line">  client_body_timeout 1000; #默认60s，用于设置读取客户端请求主体的超时时间，仅仅为俩次成功的读取操作之间的一个超时，非请求整个主体数据的超时时间。如果在这个超时时间内，客户端没有发 人和数据，nginx将返回&quot;Request timo out(408)&quot;错误</span><br><span class="line">  send_timeout 1000;  #默认是60s，服务器传送http响应信息到客户端的超时时间，这个超时仅仅为俩次成功握手后的一个超时，非请求整个响应数据的超时时间，如果在这个超时时间内，客户端没有接收任何数据，链接将被关闭。</span><br><span class="line">  gzip on; #开启gzip</span><br><span class="line">  gzip_disable &quot;msie6&quot;; #IE6不使用gzip</span><br><span class="line">  gzip_vary on; #设置为on会在Header里增加 &quot;Vary: Accept-Encoding&quot;</span><br><span class="line">  gzip_proxied any; #代理结果数据的压缩</span><br><span class="line">  gzip_comp_level 6; #gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值</span><br><span class="line">  gzip_buffers 16 8k; #获取多少内存用于缓存压缩结果</span><br><span class="line">  gzip_http_version 1.1; #识别http协议的版本</span><br><span class="line">  gzip_min_length 1k; #设置允许压缩的页面最小字节数，超过1k的文件会被压缩</span><br><span class="line">  gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;json text&#x2F;css; #对特定的MIME类型生效,js和css文件会被压缩</span><br><span class="line">  proxy_read_timeout 1240s; #默认值是 60s ，我们可以设置为240s,或者300s。来应对上游服务器处理请求慢的问题</span><br><span class="line">  keepalive_timeout  65;</span><br><span class="line">  #gzip  on;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="nginx-ssl-配置"><a href="#nginx-ssl-配置" class="headerlink" title="nginx ssl 配置"></a>nginx ssl 配置</h1><p>去 nginx 官网，下载最新文件<br>tar -xzvf nginx-1.23.4.tar.gz<br>cd /nginx-1.23.4</p>
<h1 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h1><p>./configure –prefix=/usr/local/nginx1.23.4 –with-http_ssl_module</p>
<h1 id="编译-amp-amp-安装"><a href="#编译-amp-amp-安装" class="headerlink" title="编译&amp;&amp;安装"></a>编译&amp;&amp;安装</h1><p>make &amp;&amp; make install</p>
<h1 id="页面禁止复制，去除"><a href="#页面禁止复制，去除" class="headerlink" title="页面禁止复制，去除"></a>页面禁止复制，去除</h1><p>$(“*“).css(“user-select”, “text”);</p>
]]></content>
  </entry>
  <entry>
    <title>通过hexo-cli + gitPage 构件博客项目</title>
    <url>/2020/12/16/hexo_blog/</url>
    <content><![CDATA[<ol>
<li>mkdir blog 建立一个文件夹</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>npm install hexo-cli -g 全局安装 hexo-cli</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd mkdir</span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>hexo init client 初始化一个 hexo 项目，项目名为 client</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init client</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>hexo new 第一篇文章 编写一个文章，存在 source_posts 文件下，生成一个 xxx.md</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 第一篇文章</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>source_posts 文件就是博客的文章内容，自己可以创建，或者直接删除</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文章格式</span><br><span class="line">---</span><br><span class="line">title: 第一篇文章 &#x2F;&#x2F; 标题</span><br><span class="line">date: 2020-12-16 11:45:45 &#x2F;&#x2F; 时间</span><br><span class="line">categories: &#x2F;&#x2F; 文件分类</span><br><span class="line">tags: &#x2F;&#x2F; 分类标签</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>进入<a href="https://hexo.io/themes/">hexo 主题官网</a></p>
</li>
<li><p>选择喜欢主题</p>
</li>
<li><p>点击进入 github 里面</p>
</li>
<li><p>在自己的 blog 里面，git clone <a href="https://github.com/Fechin/hexo-theme-diaspora">https://github.com/Fechin/hexo-theme-diaspora</a> themes/diaspora 执行该命令！（感谢，<a href="https://github.com/Fechin">Fechin</a>的无私开源）</p>
</li>
<li><p>这个主题的具体配置可参考<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a></p>
</li>
<li><p>首先在 git 上创建一个自己的仓库，仓库名称为 GitMrs(自己的用户名).github.io；</p>
</li>
<li><p>进入到 hexo 的配置文件_config.yml 配置 git 信息</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 找到这个配置</span><br><span class="line">deploy</span><br><span class="line">  type: &#39;git&#39; &#x2F;&#x2F; 类型</span><br><span class="line">  repo: git@github.com:GitMrs&#x2F;GitMrs.github.io.git &#x2F;&#x2F; 仓库地址</span><br><span class="line">  branch: master &#x2F;&#x2F; 分支</span><br></pre></td></tr></table></figure>

<ol start="13">
<li><p>npm install hexo-deployer-git -s 安装 hexo 发布模块</p>
</li>
<li><p>hexo generate // 打包单页应用</p>
</li>
<li><p>执行 hexo deploy // 发布上线（一般两次发布时间需要间隔 2 分钟！否则会提示没有权限）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加live2D</title>
    <url>/2020/12/31/hexo%E6%B7%BB%E5%8A%A0live2D/</url>
    <content><![CDATA[<h2 id="给-hexo-博客添加-live2d，可爱的看板娘！"><a href="#给-hexo-博客添加-live2d，可爱的看板娘！" class="headerlink" title="给 hexo 博客添加 live2d，可爱的看板娘！"></a>给 hexo 博客添加 live2d，可爱的看板娘！</h2><h3 id="使用官方简单办法"><a href="#使用官方简单办法" class="headerlink" title="使用官方简单办法"></a>使用官方简单办法</h3><ol>
<li><p>安装 hexo-helper-live2d 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-helper-live2d</span><br></pre></td></tr></table></figure></li>
<li><p>安装 live2d 模型，模型有肯定可供选择具体可以<a href="https://huaji8.top/post/live2d-plugin-2.0/">查看</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 hexo 配置__config.yml 项中新增 live2d 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">    enable: true</span><br><span class="line">    scriptFrom: local</span><br><span class="line">    pluginRootPath: live2dw&#x2F;</span><br><span class="line">    pluginJsPath: lib&#x2F;</span><br><span class="line">    pluginModelPath: assets&#x2F;</span><br><span class="line">    tagMode: false</span><br><span class="line">    debug: false</span><br><span class="line">    model:</span><br><span class="line">      use: live2d-widget-model-shizuku</span><br><span class="line">    display:</span><br><span class="line">      position: right</span><br><span class="line">      width: 300</span><br><span class="line">      height: 600</span><br><span class="line">    mobile:</span><br><span class="line">      show: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="根据hexo-theme-diaspora这个主题使用大神定制版的看板娘"><a href="#根据hexo-theme-diaspora这个主题使用大神定制版的看板娘" class="headerlink" title="根据hexo-theme-diaspora这个主题使用大神定制版的看板娘"></a>根据<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a>这个主题使用大神定制版的<a href="https://github.com/stevenjoezhang/live2d-widget">看板娘</a></h2><h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><ol>
<li>找到 themes/diaspora/layout/_partial/head.ejs 头部引入模板,再 head 标签里面引入字体样式，和 live2d 线上 js 即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启服务，即可</li>
</ol>
<h3 id="定制用法"><a href="#定制用法" class="headerlink" title="定制用法"></a>定制用法</h3><ol>
<li>找到 themes/diaspora/layout/_partial/head.ejs 头部引入模板,再 head 标签里面引入字体样式，本地自己引入配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li>打开<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>,将该项目下载下来，修改名字为 live2d 放到<br>/themes/diaspora/source 目录中</li>
<li>打开/themes/diaspora/source/live2d;文件中的 autoload.js,修改文件 live2d_path<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意：live2d_path 参数应使用绝对路径</span><br><span class="line">&#x2F;&#x2F; const live2d_path &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;&quot;;</span><br><span class="line">const live2d_path &#x3D; &quot;&#x2F;live2d&#x2F;&quot;; &#x2F;&#x2F; 此处修改的名字和文件名保持一致！</span><br></pre></td></tr></table></figure></li>
<li>找到 themes/diaspora/layout/_partial/scripts.ejs 脚本引入模板,在 js 引入列表中添加刚才修改的文件路径,下面 live2d/autoload.js 是新增的！<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.gitalk.enable)&#123; %&gt;&lt;%- js([&#39;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&#39;])%&gt;&lt;%&#125;%&gt;</span><br><span class="line">&lt;%- js([&#39;&#x2F;&#x2F;lib.baomitu.com&#x2F;jquery&#x2F;1.8.3&#x2F;jquery.min.js&#39;, &#39;js&#x2F;plugin.js&#39;, &#39;js&#x2F;typed.js&#39;, &#39;js&#x2F;diaspora.js&#39;,&#39;live2d&#x2F;autoload.js&#39;])%&gt;</span><br><span class="line">&lt;%- partial(&#39;photoswipe&#39;) %&gt;</span><br></pre></td></tr></table></figure></li>
<li>重启服务既可以看到了！</li>
</ol>
<h1 id="部分小问题"><a href="#部分小问题" class="headerlink" title="部分小问题"></a>部分小问题</h1><ul>
<li><p>在<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a>这个主题中，看板娘被图片挡住！</p>
<p>修改/themes/diaspora/source/live2d 下的 waifu.css;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#waifu &#123;</span><br><span class="line">  bottom: -1000px;</span><br><span class="line">  left: 0;</span><br><span class="line">  line-height: 0;</span><br><span class="line">  margin-bottom: -10px;</span><br><span class="line">  position: fixed;</span><br><span class="line">  transform: translateY(3px);</span><br><span class="line">  transition: transform .3s ease-in-out, bottom 3s ease-in-out;</span><br><span class="line">  z-index: 6; &#x2F;&#x2F; 原本是1，修改大于6即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动端不显示</p>
<p>修改 themes/diaspora/sourcelive2d 下的 autoload.js 文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 此处判断屏幕宽度，大于768显示；注释掉判断就可全部显示</span><br><span class="line">&#x2F;&#x2F; if (screen.width &gt;&#x3D; 768) &#123;</span><br><span class="line">  Promise.all([</span><br><span class="line">    loadExternalResource(live2d_path + &quot;waifu.css&quot;, &quot;css&quot;),</span><br><span class="line">    loadExternalResource(live2d_path + &quot;live2d.min.js&quot;, &quot;js&quot;),</span><br><span class="line">    loadExternalResource(live2d_path + &quot;waifu-tips.js&quot;, &quot;js&quot;)</span><br><span class="line">  ]).then(() &#x3D;&gt; &#123;</span><br><span class="line">    initWidget(&#123;</span><br><span class="line">      waifuPath: live2d_path + &quot;waifu-tips.json&quot;,</span><br><span class="line">      &#x2F;&#x2F;apiPath: &quot;https:&#x2F;&#x2F;live2d.fghrsh.net&#x2F;api&#x2F;&quot;,</span><br><span class="line">      cdnPath: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;fghrsh&#x2F;live2d_api&#x2F;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins 项目配置</title>
    <url>/2022/08/15/jenkins%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>jenkins 项目配置，默认已经配好 nginx；项目目录都已经创建好！</p>
<h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="创建一个-item，选择-Freestyle-project-模式"><a href="#创建一个-item，选择-Freestyle-project-模式" class="headerlink" title="创建一个 item，选择 Freestyle project 模式"></a>创建一个 item，选择 Freestyle project 模式</h3><h3 id="源码管理-git"><a href="#源码管理-git" class="headerlink" title="源码管理 git"></a>源码管理 git</h3><ul>
<li>填写 git 地址</li>
<li>密码</li>
<li>指定分支</li>
</ul>
<h3 id="增加构建步骤"><a href="#增加构建步骤" class="headerlink" title="增加构建步骤"></a>增加构建步骤</h3><ul>
<li>Execute shell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm -rf yarn.lock</span><br><span class="line">yarn</span><br><span class="line">yarn build</span><br><span class="line">cp -r ./dist ./home</span><br><span class="line">tar -zcvf dist.tar.gz ./dist</span><br><span class="line">mv /home/frontend/xdzq/web/home/ /home/frontend/xdzq/<span class="built_in">history</span>/home</span><br><span class="line">mv /home/frontend/xdzq/<span class="built_in">history</span>/home/home  /home/frontend/xdzq/<span class="built_in">history</span>/home/home$(date +%s)</span><br><span class="line">mv ./home /home/frontend/xdzq/web</span><br></pre></td></tr></table></figure>

<h3 id="推送到别的服务器"><a href="#推送到别的服务器" class="headerlink" title="推送到别的服务器"></a>推送到别的服务器</h3><ul>
<li>增加构建后操作步骤 -&gt; Send build artifacts over SSH</li>
<li>SSH Server<br>· Name 选择对应的服务器</li>
<li>Transfers<br>· Source files -&gt; 选择上面打包的 dist.tar.gz<br>· Remove prefix -&gt; 空<br>· Remote directory -&gt; 指定服务器的目录<br>· Exec command 服务的指令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/frontend/xdzq/web</span><br><span class="line">mv ./home  /home/frontend/xdzq/<span class="built_in">history</span>/home/</span><br><span class="line">mv /home/frontend/xdzq/<span class="built_in">history</span>/home/home  /home/frontend/xdzq/<span class="built_in">history</span>/home/home$(date +%s)</span><br><span class="line">tar -zxvf dist.tar.gz</span><br><span class="line">rm -rf  dist.tar.gz</span><br><span class="line">mv ./dist home</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode插件开发</title>
    <url>/2021/01/04/vsCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="记录一下vsCode-插件开发的流程"><a href="#记录一下vsCode-插件开发的流程" class="headerlink" title="记录一下vsCode 插件开发的流程"></a>记录一下vsCode 插件开发的流程</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>node 环境</li>
<li>npm 一般安装完node就自带了</li>
<li>vscode插件接口API</li>
<li>yeoman npm install -g yo</li>
<li>generator-code npm install -g generator-code<h2 id="开始搭建一个vsCode插件，起始项目"><a href="#开始搭建一个vsCode插件，起始项目" class="headerlink" title="开始搭建一个vsCode插件，起始项目"></a>开始搭建一个vsCode插件，起始项目</h2></li>
<li>开始搭建一个vsCode插件，起始项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yo code</span><br></pre></td></tr></table></figure></li>
<li>文件目录说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules &#x2F;&#x2F; 依赖</span><br><span class="line">test &#x2F;&#x2F; 测试文件</span><br><span class="line">CHANGELOG.md &#x2F;&#x2F; 文件变成说明</span><br><span class="line">extension.js &#x2F;&#x2F; 入口文件说明</span><br><span class="line">jsconfig.json &#x2F;&#x2F; javascript 配置</span><br><span class="line">README.md &#x2F;&#x2F; 插件说明</span><br><span class="line">vsc-extension-quickstart.md &#x2F;&#x2F; 使用说明</span><br></pre></td></tr></table></figure></li>
<li>package.json<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">  &quot;name&quot;: &quot;test&quot;, &#x2F;&#x2F; 项目名</span><br><span class="line">  &quot;displayName&quot;: &quot;test&quot;, &#x2F;&#x2F; 发布后商店里的名称</span><br><span class="line">  &quot;description&quot;: &quot;&quot;, &#x2F;&#x2F; 描述</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;, &#x2F;&#x2F; 版本</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;vscode&quot;: &quot;^1.52.0&quot;  &#x2F;&#x2F; 依赖环境</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;categories&quot;: [</span><br><span class="line">    &quot;Other&quot; &#x2F;&#x2F; 插件分类</span><br><span class="line">  ],</span><br><span class="line">  &quot;activationEvents&quot;: [ &#x2F;&#x2F; 插件激活的事件数组</span><br><span class="line">        &quot;onCommand:test.helloWorld&quot; </span><br><span class="line">  ],</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;extension.js&quot;, &#x2F;&#x2F; 入口文件</span><br><span class="line">  &#x2F;&#x2F; 插件最多的配置项</span><br><span class="line">  &quot;contributes&quot;: &#123; </span><br><span class="line">    &#x2F;&#x2F; 命令</span><br><span class="line">    &quot;commands&quot;: [&#123;</span><br><span class="line">            &quot;command&quot;: &quot;test.helloWorld&quot;,</span><br><span class="line">            &quot;title&quot;: &quot;Hello World&quot;</span><br><span class="line"></span><br><span class="line">    &#125;],</span><br><span class="line">    &#x2F;&#x2F; 配置文件</span><br><span class="line">    &quot;configuration&quot;: [</span><br><span class="line">      &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;helloWorld&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123; &#x2F;&#x2F; 具体的配置参数</span><br><span class="line">        &quot;helloWorld.api&quot;:&#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">            &quot;default&quot;: &quot;helloWorld&quot;,</span><br><span class="line">            &quot;description&quot;: &quot;文字说明&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 执行代码</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint .&quot;,</span><br><span class="line">    &quot;pretest&quot;: &quot;yarn run lint&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;node .&#x2F;test&#x2F;runTest.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 依赖</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">        &quot;@types&#x2F;vscode&quot;: &quot;^1.52.0&quot;,</span><br><span class="line">        &quot;@types&#x2F;glob&quot;: &quot;^7.1.3&quot;,</span><br><span class="line">        &quot;@types&#x2F;mocha&quot;: &quot;^8.0.4&quot;,</span><br><span class="line">        &quot;@types&#x2F;node&quot;: &quot;^12.11.7&quot;,</span><br><span class="line">        &quot;eslint&quot;: &quot;^7.15.0&quot;,</span><br><span class="line">        &quot;glob&quot;: &quot;^7.1.6&quot;,</span><br><span class="line">        &quot;mocha&quot;: &quot;^8.1.3&quot;,</span><br><span class="line">        &quot;typescript&quot;: &quot;^4.1.2&quot;,</span><br><span class="line">        &quot;vscode-test&quot;: &quot;^1.4.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开始编写一个基于hitokoto的插件"><a href="#开始编写一个基于hitokoto的插件" class="headerlink" title="开始编写一个基于hitokoto的插件"></a>开始编写一个基于hitokoto的插件</h2></li>
<li>在package.json 中的contributes中配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &quot;contributes&quot;: &#123;</span><br><span class="line">  &quot;commands&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;command&quot;: &quot;extension.hitokoto&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;hitokoto&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;configuration&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;hitokoto&quot;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;hitokoto.api&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">        &quot;default&quot;: &quot;https:&#x2F;&#x2F;v1.hitokoto.cn&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;hitokotoAPI接口地址&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;hitokoto.fontColor&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">        &quot;default&quot;: &quot;#ffffff&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;字体颜色(状态栏显示时有效)&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>代码编写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const vscode &#x3D; require(&#39;vscode&#39;);</span><br><span class="line">const axios &#x3D; require(&#39;axios&#39;);</span><br><span class="line">&#x2F;**</span><br><span class="line">* @param &#123;vscode.ExtensionContext&#125; context</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 创建一个Bar存放文章</span><br><span class="line">const hitokotoBarItem &#x3D; vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活</span><br><span class="line">function activate(context) &#123;</span><br><span class="line">  &#x2F;&#x2F; 定义数据结构</span><br><span class="line">  const hitokoto &#x3D; &#123;</span><br><span class="line">    id: null,</span><br><span class="line">    intervalTimeFlag: null</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;&#x2F; 当ctrl+shift+p 输入时hitokoto时 都重新获取</span><br><span class="line">  let disposable &#x3D; vscode.commands.registerCommand(&#39;extension.hitokoto&#39;, function () &#123;</span><br><span class="line">    createHitokoto(hitokoto);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 当ctrl+shift+p 输入时refreshHitokoto时 都重新获取</span><br><span class="line">  const getText &#x3D; vscode.commands.registerCommand(&#39;extension.refreshHitokoto&#39;, function () &#123;</span><br><span class="line">    createHitokoto(hitokoto);</span><br><span class="line">  &#125;)</span><br><span class="line">  &#x2F;&#x2F; 将其放入context中</span><br><span class="line">  context.subscriptions.push(disposable);</span><br><span class="line">  context.subscriptions.push(getText)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 获取数据</span><br><span class="line">function createHitokoto(hitokoto) &#123;</span><br><span class="line">  const api &#x3D; vscode.workspace.getConfiguration().get(&#39;hitokoto.api&#39;);</span><br><span class="line">  axios.get(api).then(res &#x3D;&gt; &#123;</span><br><span class="line">    hitokoto[&#39;id&#39;] &#x3D; res.data.id;</span><br><span class="line">    showHitokoto(res.data);</span><br><span class="line">  &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">    vscode.window.showInformationMessage(&#39;API服务连接失败&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 展示出来</span><br><span class="line">function showHitokoto(data) &#123;</span><br><span class="line">  hitokotoBarItem.color &#x3D; vscode.workspace.getConfiguration().get(&#39;hitokoto.fontColor&#39;);</span><br><span class="line">  hitokotoBarItem.text &#x3D; &#96;$&#123;data.hitokoto&#125; --- $&#123;data.from&#125;&#96;;</span><br><span class="line">  hitokotoBarItem.command &#x3D; &#96;extension.refreshHitokoto&#96;;</span><br><span class="line">  hitokotoBarItem.tooltip &#x3D; &quot;点击刷新&quot;;</span><br><span class="line">  hitokotoBarItem.show();</span><br><span class="line">&#125;</span><br><span class="line">exports.activate &#x3D; activate;</span><br><span class="line">&#x2F;&#x2F; 插件被停用的时候被调用</span><br><span class="line">function deactivate() &#123; &#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  activate,</span><br><span class="line">  deactivate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>发布详细见<a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">vscode发布说明</a></li>
</ul>
]]></content>
      <categories>
        <category>cli</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建企业版orcal</title>
    <url>/2023/03/22/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAorcal%E4%BC%81%E4%B8%9A%E7%89%88/</url>
    <content><![CDATA[<h2 id="拉取镜像并启动"><a href="#拉取镜像并启动" class="headerlink" title="拉取镜像并启动"></a>拉取镜像并启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name oracle19c -p 1521:1521 -p 5500:5500 --privileged=<span class="literal">true</span> -it -v /opt/soft/db/oracle/:/var/opt/oracle/data -e TZ=Asia/Chongqing registry.cn-beijing.aliyuncs.com/zhouchaoyi/oracle19c:19.3 </span><br></pre></td></tr></table></figure>
<h2 id="进入镜像内部"><a href="#进入镜像内部" class="headerlink" title="进入镜像内部"></a>进入镜像内部</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle19c /bin/bash </span><br></pre></td></tr></table></figure>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setPassword.sh 123456</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep $ORACLE_HOME &#x2F;etc&#x2F;oratab | cut -d: -f1 </span><br><span class="line">export ORACLE_SID&#x3D;ORCLCDB </span><br></pre></td></tr></table></figure>
<h2 id="登录orcal"><a href="#登录orcal" class="headerlink" title="登录orcal"></a>登录orcal</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus &#x2F; as sysdba </span><br><span class="line">show pdbs; </span><br><span class="line">alter session set container&#x3D;ORCLPDB1;</span><br></pre></td></tr></table></figure>
<h2 id="重启一下docker"><a href="#重启一下docker" class="headerlink" title="重启一下docker"></a>重启一下docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart oracle19c</span><br></pre></td></tr></table></figure>
<h2 id="部署完成，使用Navicat-连接测试"><a href="#部署完成，使用Navicat-连接测试" class="headerlink" title="部署完成，使用Navicat 连接测试"></a>部署完成，使用Navicat 连接测试</h2><ul>
<li>主机 127.0.0.1</li>
<li>端口 1521</li>
<li>服务名 ORCLPDB1</li>
<li>用户名 system</li>
<li>密码 123456</li>
</ul>
<h2 id="登录orcal管理页面验证"><a href="#登录orcal管理页面验证" class="headerlink" title="登录orcal管理页面验证"></a>登录orcal管理页面验证</h2><ul>
<li><a href="https://127.0.0.1:5500/em/">https://127.0.0.1:5500/em/</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2 内部可以被watch</title>
    <url>/2024/10/08/%E5%86%85%E9%83%A8%E5%8F%AF%E4%BB%A5%E8%A2%ABwatch/</url>
    <content><![CDATA[<p>在 Vue 2.x 中，使用 inject 注入的值默认情况下是不能被 watch 直接监控到的，因为 inject 提供的值不是响应式的。如果想通过 watch 监控 inject 注入的值，需要使用 Vue 的 computed 计算属性来监控。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1、父组件定义说明"><a href="#1、父组件定义说明" class="headerlink" title="1、父组件定义说明"></a>1、父组件定义说明</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      activeTab: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      container: <span class="built_in">this</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">getActiveTab</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.activeTab;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">changeActiveTab</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.activeTab = index;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2、子组件使用"><a href="#2、子组件使用" class="headerlink" title="2、子组件使用"></a>2、子组件使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inject: [<span class="string">&quot;container&quot;</span>],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">activeTab</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.container.getActiveTab();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="function"><span class="title">activeTab</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;container.activeTab&quot;</span>(val) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(val);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的shell脚本</title>
    <url>/2023/09/01/%E5%B8%B8%E7%94%A8%E7%9A%84shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="检测两台服务器指定目录下的文件一致性"><a href="#检测两台服务器指定目录下的文件一致性" class="headerlink" title="检测两台服务器指定目录下的文件一致性"></a>检测两台服务器指定目录下的文件一致性</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">检测两台服务器指定目录下的文件一致性</span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line"><span class="comment">#通过对比两台服务器上文件的md5值，达到检测一致性的目的</span></span><br><span class="line">dir=/data/web</span><br><span class="line">b_ip=192.168.88.10</span><br><span class="line"><span class="comment">#将指定目录下的文件全部遍历出来并作为md5sum命令的参数，进而得到所有文件的md5值，并写入到指定文件中</span></span><br><span class="line">find <span class="variable">$dir</span> -<span class="built_in">type</span> f|xargs md5sum &gt; /tmp/md5_a.txt</span><br><span class="line">ssh <span class="variable">$b_ip</span> <span class="string">&quot;find <span class="variable">$dir</span> -type f|xargs md5sum &gt; /tmp/md5_b.txt&quot;</span></span><br><span class="line">scp <span class="variable">$b_ip</span>:/tmp/md5_b.txt /tmp</span><br><span class="line"><span class="comment">#将文件名作为遍历对象进行一一比对</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `awk <span class="string">&#x27;&#123;print 2&#125; /tmp/md5_a.txt&#x27;</span>`<span class="keyword">do</span></span><br><span class="line"><span class="comment">#以a机器为标准，当b机器不存在遍历对象中的文件时直接输出不存在的结果</span></span><br><span class="line"><span class="keyword">if</span> grep -qw <span class="string">&quot;<span class="variable">$f</span>&quot;</span> /tmp/md5_b.txt</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">md5_a=`grep -w <span class="string">&quot;<span class="variable">$f</span>&quot;</span> /tmp/md5_a.txt|awk <span class="string">&#x27;&#123;print 1&#125;&#x27;</span>`</span><br><span class="line">md5_b=`grep -w <span class="string">&quot;<span class="variable">$f</span>&quot;</span> /tmp/md5_b.txt|awk <span class="string">&#x27;&#123;print 1&#125;&#x27;</span>`</span><br><span class="line"><span class="comment">#当文件存在时，如果md5值不一致则输出文件改变的结果</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$md5_a</span> != <span class="variable">$md5_b</span> ]<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span> changed.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span> deleted.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="定时清空文件内容，定时记录文件大小"><a href="#定时清空文件内容，定时记录文件大小" class="headerlink" title="定时清空文件内容，定时记录文件大小"></a>定时清空文件内容，定时记录文件大小</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line">每小时执行一次脚本（任务计划），当时间为0点或12点时，将目标目录下的所有文件内<span class="comment">#容清空，但不删除文件，其他时间则只统计各个文件的大小，一个文件一行，输出到以时#间和日期命名的文件中，需要考虑目标目录下二级、三级等子目录的文件</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line">logfile=/tmp/`date +%H-%F`.<span class="built_in">log</span></span><br><span class="line">n=`date +%H`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$n</span> -eq 00 ] || [ <span class="variable">$n</span> -eq 12 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="comment">#通过for循环，以find命令作为遍历条件，将目标目录下的所有文件进行遍历并做相应操作</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `find /data/<span class="built_in">log</span>/ -<span class="built_in">type</span> f`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="literal">true</span> &gt; <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `find /data/<span class="built_in">log</span>/ -<span class="built_in">type</span> f`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">du -sh <span class="variable">$i</span> &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h1 id="检测网卡流量，并按规定格式记录在日志中"><a href="#检测网卡流量，并按规定格式记录在日志中" class="headerlink" title="检测网卡流量，并按规定格式记录在日志中"></a>检测网卡流量，并按规定格式记录在日志中</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"><span class="comment">#检测网卡流量，并按规定格式记录在日志中#规定一分钟记录一次</span></span><br><span class="line"><span class="comment">#日志格式如下所示:</span></span><br><span class="line"><span class="comment">#2019-08-12 20:40</span></span><br><span class="line"><span class="comment">#ens33 input: 1234bps</span></span><br><span class="line"><span class="comment">#ens33 output: 1235bps</span></span><br><span class="line"><span class="comment">######################################################3</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#设置语言为英文，保障输出结果是英文，否则会出现bug</span></span><br><span class="line">LANG=en</span><br><span class="line">logfile=/tmp/`date +%d`.<span class="built_in">log</span></span><br><span class="line"><span class="comment">#将下面执行的命令结果输出重定向到logfile日志中</span></span><br><span class="line"><span class="built_in">exec</span> &gt;&gt; <span class="variable">$logfile</span></span><br><span class="line">date +<span class="string">&quot;%F %H:%M&quot;</span></span><br><span class="line"><span class="comment">#sar命令统计的流量单位为kb/s，日志格式为bps，因此要*1000*8</span></span><br><span class="line">sar -n DEV 1 59|grep Average|grep ens33|awk <span class="string">&#x27;&#123;print $2,&quot;\t&quot;,&quot;input:&quot;,&quot;\t&quot;,$5*1000*8,&quot;bps&quot;,&quot;\n&quot;,$2,&quot;\t&quot;,&quot;output:&quot;,&quot;\t&quot;,$6*1000*8,&quot;bps&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;####################&quot;</span></span><br><span class="line"><span class="comment">#因为执行sar命令需要59秒，因此不需要sleep</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="计算文档每行出现的数字个数，并计算整个文档的数字总数"><a href="#计算文档每行出现的数字个数，并计算整个文档的数字总数" class="headerlink" title="计算文档每行出现的数字个数，并计算整个文档的数字总数"></a>计算文档每行出现的数字个数，并计算整个文档的数字总数</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">######################################################### #计算文档每行出现的数字个数，并计算整个文档的数字总数</span></span><br><span class="line"><span class="comment">######################################################## #使用 awk 只输出文档行数（截取第一段）</span></span><br><span class="line">n=`wc -l a.txt|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">sum=0 <span class="comment">#文档中每一行可能存在空格，因此不能直接用文档内容进行遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 <span class="variable">$n</span>`<span class="keyword">do</span> <span class="comment">#输出的行用变量表示时，需要用双引号</span></span><br><span class="line">line=`sed -n <span class="string">&quot;<span class="variable">$i</span>&quot;</span>p a.txt`<span class="comment">#wc -L 选项，统计最长行的长度</span></span><br><span class="line">n_n=`<span class="built_in">echo</span> <span class="variable">$line</span>|sed s<span class="string">&#x27;/[^0-9]//&#x27;</span>g|wc -L`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n_nsum</span>=$[<span class="variable">$sum</span>+<span class="variable">$n_n</span>]</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum:<span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="杀死所有脚本"><a href="#杀死所有脚本" class="headerlink" title="杀死所有脚本"></a>杀死所有脚本</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">################################################################ #有一些脚本加入到了 cron 之中，存在脚本尚未运行完毕又有新任务需要执行的情况， #导致系统负载升高，因此可通过编写脚本，筛选出影响负载的进程一次性全部杀死。</span></span><br><span class="line"><span class="comment">################################################################</span></span><br><span class="line">ps aux|grep 指定进程名|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>

<h1 id="从-FTP-服务器下载文件"><a href="#从-FTP-服务器下载文件" class="headerlink" title="从 FTP 服务器下载文件"></a>从 FTP 服务器下载文件</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ];</span><br><span class="line"><span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> filename&quot;</span>fidir=$(dirname <span class="variable">$1</span>)file=$(basename <span class="variable">$1</span>)ftp -n -v &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"># -n 自动登录open 192.168.1.10</span></span><br><span class="line"><span class="string"># ftp服务器user admin passwordbinary</span></span><br><span class="line"><span class="string"># 设置ftp传输模式为二进制，避免MD5值不同或.tar.gz压缩包格式错误cd</span></span><br><span class="line"><span class="string">$dirget &quot;$file&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h1 id="连续输入-5-个-100-以内的数字，统计和、最小和最大"><a href="#连续输入-5-个-100-以内的数字，统计和、最小和最大" class="headerlink" title="连续输入 5 个 100 以内的数字，统计和、最小和最大"></a>连续输入 5 个 100 以内的数字，统计和、最小和最大</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">COUNT=1</span><br><span class="line">SUM=0</span><br><span class="line">MIN=0</span><br><span class="line">MAX=100</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$COUNT</span> -le 5 ]; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入 1-10 个整数：&quot;</span> INT</span><br><span class="line"> <span class="keyword">if</span> [[! <span class="variable">$INT</span> =~ ^[0-9]+$]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入必须是整数！&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [[<span class="variable">$INT</span> -gt 100]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;输入必须是 100 以内！&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">SUM=$((<span class="variable">$SUM</span>+<span class="variable">$INT</span>))</span><br><span class="line">    [ <span class="variable">$MIN</span> -lt <span class="variable">$INT</span> ] &amp;&amp; MIN=<span class="variable">$INT</span></span><br><span class="line">[ <span class="variable">$MAX</span> -gt <span class="variable">$INT</span> ] &amp;&amp; MAX=<span class="variable">$INT</span></span><br><span class="line"><span class="built_in">let</span> COUNT++</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUM: <span class="variable">$SUM</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MIN: <span class="variable">$MIN</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MAX: <span class="variable">$MAX</span></span></span><br></pre></td></tr></table></figure>

<h1 id="用户猜数字"><a href="#用户猜数字" class="headerlink" title="用户猜数字"></a>用户猜数字</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash # 脚本生成一个 100 以内的随机数,提示用户猜数字,根据用户的输入,提示用户猜对了,</span></span><br><span class="line"><span class="comment"># 猜小了或猜大了,直至用户猜对脚本结束。</span></span><br><span class="line"><span class="comment"># RANDOM 为系统自带的系统变量,值为 0‐32767 的随机数</span></span><br><span class="line"><span class="comment"># 使用取余算法将随机数变为 1‐100 的随机数 num=$[RANDOM%100+1]echo &quot;$num&quot;</span></span><br><span class="line"><span class="comment"># 使用 read 提示用户猜数字</span></span><br><span class="line"><span class="comment"># 使用 if 判断用户猜数字的大小关系:‐eq(等于),‐ne(不等于),‐gt(大于),‐ge(大于等于),</span></span><br><span class="line"><span class="comment"># ‐lt(小于),‐le(小于等于)</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> <span class="built_in">read</span> -p <span class="string">&quot;计算机生成了一个 1‐100 的随机数,你猜: &quot;</span> cai</span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$cai</span> -eq <span class="variable">$num</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;恭喜,猜对了&quot;</span></span><br><span class="line"> <span class="built_in">exit</span></span><br><span class="line"> <span class="keyword">elif</span> [ <span class="variable">$cai</span> -gt <span class="variable">$num</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Oops,猜大了&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Oops,猜小了&quot;</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="监测-Nginx-访问日志-502-情况，并做相应动作"><a href="#监测-Nginx-访问日志-502-情况，并做相应动作" class="headerlink" title="监测 Nginx 访问日志 502 情况，并做相应动作"></a>监测 Nginx 访问日志 502 情况，并做相应动作</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#假设服务器环境为 lnmp，近期访问经常出现 502 现象，且 502 错误在重启 php-fpm 服务后消失，因此需要编写监控脚本，一旦出现 502，则自动重启 php-fpm 服务。 #场景：</span></span><br><span class="line"><span class="comment">#1.访问日志文件的路径：/data/log/access.log</span></span><br><span class="line"><span class="comment">#2.脚本死循环，每 10 秒检测一次，10 秒的日志条数为 300 条，出现 502 的比例不低于 10%（30 条）则需要重启 php-fpm 服务</span></span><br><span class="line"><span class="comment">#3.重启命令为：/etc/init.d/php-fpm restart</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">########################################################### #监测 Nginx 访问日志 502 情况，并做相应动作</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="built_in">log</span>=/data/<span class="built_in">log</span>/access.log</span><br><span class="line">N=30 <span class="comment">#设定阈值</span></span><br><span class="line"><span class="keyword">while</span> :<span class="keyword">do</span> <span class="comment">#查看访问日志的最新 300 条，并统计 502 的次数</span></span><br><span class="line">err=`tail -n 300 <span class="variable">$log</span> |grep -c <span class="string">&#x27;502&quot; &#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$err</span> -ge <span class="variable">$N</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">/etc/init.d/php-fpm restart 2&gt; /dev/null <span class="comment">#设定 60s 延迟防止脚本 bug 导致无限重启 php-fpm 服务</span></span><br><span class="line">sleep 60</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sleep 10</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="将结果分别赋值给变量"><a href="#将结果分别赋值给变量" class="headerlink" title="将结果分别赋值给变量"></a>将结果分别赋值给变量</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#应用场景：希望将执行结果或者位置参数赋值给变量，以便后续使用。</span></span><br><span class="line"><span class="comment">#方法 1：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">echo</span> <span class="string">&quot;4 5 6&quot;</span>); <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">eval</span> a<span class="variable">$i</span>=<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a4</span> <span class="variable">$a5</span> <span class="variable">$a6</span></span><br><span class="line"><span class="comment">#方法 2：将位置参数 192.168.1.1&#123;1,2&#125;拆分为到每个变量</span></span><br><span class="line">num=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">eval</span> <span class="built_in">echo</span> $*);<span class="keyword">do</span>   <span class="comment">#eval将&#123;1,2&#125;分解为1 2</span></span><br><span class="line">   <span class="built_in">let</span> num+=1</span><br><span class="line">   <span class="built_in">eval</span> node<span class="variable">$&#123;num&#125;</span>=<span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$node1</span> <span class="variable">$node2</span> <span class="variable">$node3</span></span><br><span class="line"><span class="comment"># bash a.sh 192.168.1.1&#123;1,2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.1.11 192.168.1.12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法 3：arr=(4 5 6)</span></span><br><span class="line">INDEX1=$(<span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span>)</span><br><span class="line">INDEX2=$(<span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span>)</span><br><span class="line">INDEX3=$(<span class="built_in">echo</span> <span class="variable">$&#123;arr[2]&#125;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="comment"># touch article\_&#123;1..3&#125;.html</span></span><br><span class="line"><span class="comment"># lsarticle_1.html article_2.html article_3.html</span></span><br><span class="line"><span class="comment">#目的：把 article 改为 bbs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法 1：</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls *html); <span class="keyword">do</span></span><br><span class="line">    mv <span class="variable">$file</span> bbs_<span class="variable">$&#123;file#_\_&#125;</span> <span class="comment"># mv $file $(echo $file |sed -r &#x27;s/._(_.\*)/bbs\1/&#x27;) # mv $file $(echo $file |echo bbs_$(cut -d\_ -f2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(find . -maxdepth 1 -name <span class="string">&quot;*html&quot;</span>); <span class="keyword">do</span></span><br><span class="line">     mv <span class="variable">$file</span> bbs_<span class="variable">$&#123;file#\*\_&#125;</span><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法 3：</span></span><br><span class="line"></span><br><span class="line">rename article bbs \*.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个文档前五行中包含字母的行删掉，同时删除 6 到 10 行包含的所有字母</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1）准备测试文件，文件名为 2.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 行 1234567 不包含字母</span></span><br><span class="line"><span class="comment"># 第 2 行 56789BBBBBB</span></span><br><span class="line"><span class="comment"># 第 3 行 67890CCCCCCCC</span></span><br><span class="line"><span class="comment"># 第 4 行 78asdfDDDDDDDDD</span></span><br><span class="line"><span class="comment"># 第 5 行 123456EEEEEEEE</span></span><br><span class="line"><span class="comment"># 第 6 行 1234567ASDF</span></span><br><span class="line"><span class="comment"># 第 7 行 56789ASDF</span></span><br><span class="line"><span class="comment"># 第 8 行 67890ASDF</span></span><br><span class="line"><span class="comment"># 第 9 行 78asdfADSF</span></span><br><span class="line"><span class="comment"># 第 10 行 123456AAAA</span></span><br><span class="line"><span class="comment"># 第 11 行 67890ASDF</span></span><br><span class="line"><span class="comment"># 第 12 行 78asdfADSF</span></span><br><span class="line"><span class="comment"># 第 13 行 123456AAAA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2）脚本如下：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line">把一个文档前五行中包含字母的行删掉，同时删除 6 到 10 行包含的所有字母</span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line">sed -n <span class="string">&#x27;1,5&#x27;</span>p 2.txt |sed <span class="string">&#x27;/[a-zA-Z]/&#x27;</span>d</span><br><span class="line">sed -n <span class="string">&#x27;6,10&#x27;</span>p 2.txt |sed s<span class="string">&#x27;/[a-zA-Z]//&#x27;</span>g</span><br><span class="line">sed -n <span class="string">&#x27;11,$&#x27;</span>p 2.txt <span class="comment">#最终结果只是在屏幕上打印结果，如果想直接更改文件，可将输出结果写入临时文件中，再替换 2.txt 或者使用-i 选项</span></span><br></pre></td></tr></table></figure>

<h1 id="统计当前目录中以-html-结尾的文件总大"><a href="#统计当前目录中以-html-结尾的文件总大" class="headerlink" title="统计当前目录中以.html 结尾的文件总大"></a>统计当前目录中以.html 结尾的文件总大</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法 1：</span></span><br><span class="line">find . -name <span class="string">&quot;\*.html&quot;</span> -<span class="built_in">exec</span> du -k &#123;&#125; \; |awk <span class="string">&#x27;&#123;sum+=$1&#125;END&#123;print sum&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法 2：</span></span><br><span class="line"><span class="keyword">for</span> size <span class="keyword">in</span> $(ls -l *.html |awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>); <span class="keyword">do</span></span><br><span class="line">    sum=$((<span class="variable">$sum</span>+<span class="variable">$size</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure>

<h1 id="扫描主机端口状态"><a href="#扫描主机端口状态" class="headerlink" title="扫描主机端口状态"></a>扫描主机端口状态</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HOST=<span class="variable">$1</span></span><br><span class="line">PORT=<span class="string">&quot;22 25 80 8080&quot;</span></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> <span class="variable">$PORT</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> &amp;&gt;/dev/null &gt; /dev/tcp/<span class="variable">$HOST</span>/<span class="variable">$PORT</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PORT</span> open&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PORT</span> close&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="用-shell-打印示例语句中字母数小于-6-的单词"><a href="#用-shell-打印示例语句中字母数小于-6-的单词" class="headerlink" title="用 shell 打印示例语句中字母数小于 6 的单词"></a>用 shell 打印示例语句中字母数小于 6 的单词</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例语句：</span></span><br><span class="line"><span class="comment">#Bash also interprets a number of multi-character options.</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment">#shell打印示例语句中字母数小于6的单词</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> Bash also interprets a number of multi-character options.</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"> n=`<span class="built_in">echo</span> <span class="variable">$s</span>|wc -c`</span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$n</span> -lt 6 ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$s</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="Expect-实现-SSH-免交互执行命令"><a href="#Expect-实现-SSH-免交互执行命令" class="headerlink" title="Expect 实现 SSH 免交互执行命令"></a>Expect 实现 SSH 免交互执行命令</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Expect是一个自动交互式应用程序的工具，如telnet，ftp，passwd等。</span></span><br><span class="line"><span class="comment"># 需先安装expect软件包。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：EOF标准输出作为expect标准输入</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">USER=root</span><br><span class="line">PASS=123.com</span><br><span class="line">IP=192.168.1.120</span><br><span class="line">expect &lt;&lt; <span class="string">EOFset timeout 30spawn ssh $USER@$IP   expect &#123;    &quot;(yes/no)&quot; &#123;send &quot;yes\r&quot;; exp_continue&#125;    &quot;password:&quot; &#123;send &quot;$PASS\r&quot;&#125;&#125;</span></span><br><span class="line"><span class="string">expect &quot;$USER@*&quot;  &#123;send &quot;$1\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;$USER@*&quot;  &#123;send &quot;exit\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect eof</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 方法2：</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">USER=root</span></span><br><span class="line"><span class="string">PASS=123.com</span></span><br><span class="line"><span class="string">IP=192.168.1.120</span></span><br><span class="line"><span class="string">expect -c &quot;</span></span><br><span class="line"><span class="string">    spawn ssh $USER@$IP</span></span><br><span class="line"><span class="string">    expect &#123;</span></span><br><span class="line"><span class="string">        \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">        \&quot;password:\&quot; &#123;send \&quot;$PASS\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">        \&quot;$USER@*\&quot; &#123;send \&quot;df -h\r exit\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">    &#125;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方法3：将expect脚本独立出来</span></span><br><span class="line"><span class="string">登录脚本：</span></span><br><span class="line"><span class="string"># cat login.exp</span></span><br><span class="line"><span class="string">#!/usr/bin/expect</span></span><br><span class="line"><span class="string">set ip [lindex $argv 0]</span></span><br><span class="line"><span class="string">set user [lindex $argv 1]</span></span><br><span class="line"><span class="string">set passwd [lindex $argv 2]</span></span><br><span class="line"><span class="string">set cmd [lindex $argv 3]</span></span><br><span class="line"><span class="string">if &#123; $argc != 4 &#125; &#123;</span></span><br><span class="line"><span class="string">puts &quot;Usage: expect login.exp ip user passwd&quot;</span></span><br><span class="line"><span class="string">exit 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">set timeout 30</span></span><br><span class="line"><span class="string">spawn ssh $user@$ip</span></span><br><span class="line"><span class="string">expect &#123;</span></span><br><span class="line"><span class="string">    &quot;(yes/no)&quot; &#123;send &quot;yes\r&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">    &quot;password:&quot; &#123;send &quot;$passwd\r&quot;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">expect &quot;$user@*&quot;  &#123;send &quot;$cmd\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;$user@*&quot;  &#123;send &quot;exit\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect eof</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 执行命令脚本：写个循环可以批量操作多台服务器</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">HOST_INFO=user_info.txt</span></span><br><span class="line"><span class="string">for ip in $(awk &#x27;&#123;print $1&#125;&#x27; $HOST_INFO)</span></span><br><span class="line"><span class="string">do</span></span><br><span class="line"><span class="string">    user=$(awk -v I=&quot;$ip&quot; &#x27;I==$1&#123;print $2&#125;&#x27; $HOST_INFO)</span></span><br><span class="line"><span class="string">    pass=$(awk -v I=&quot;$ip&quot; &#x27;I==$1&#123;print $3&#125;&#x27; $HOST_INFO)</span></span><br><span class="line"><span class="string">    expect login.exp $ip $user $pass $1</span></span><br><span class="line"><span class="string">done</span></span><br></pre></td></tr></table></figure>

<h1 id="Linux-主机-SSH-连接信息："><a href="#Linux-主机-SSH-连接信息：" class="headerlink" title="Linux 主机 SSH 连接信息："></a>Linux 主机 SSH 连接信息：</h1><h1 id="cat-user-info-txt"><a href="#cat-user-info-txt" class="headerlink" title="cat user_info.txt"></a>cat user_info.txt</h1><p>192.168.1.120 root 123456</p>
<h1 id="创建-10-个用户，并分别设置密码，密码要求-10-位且包含大小写字母以及数字，最后需要把每个用户的密码存在指定文件中"><a href="#创建-10-个用户，并分别设置密码，密码要求-10-位且包含大小写字母以及数字，最后需要把每个用户的密码存在指定文件中" class="headerlink" title="创建 10 个用户，并分别设置密码，密码要求 10 位且包含大小写字母以及数字，最后需要把每个用户的密码存在指定文件中"></a>创建 10 个用户，并分别设置密码，密码要求 10 位且包含大小写字母以及数字，最后需要把每个用户的密码存在指定文件中</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment">#创建10个用户，并分别设置密码，密码要求10位且包含大小写字母以及数字</span></span><br><span class="line"><span class="comment">#最后需要把每个用户的密码存在指定文件中#前提条件：安装mkpasswd命令</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment">#生成10个用户的序列（00-09）</span></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> `seq -w 0 09`<span class="keyword">do</span></span><br><span class="line"> <span class="comment">#创建用户</span></span><br><span class="line"> useradd user_<span class="variable">$u</span></span><br><span class="line"> <span class="comment">#生成密码</span></span><br><span class="line"> p=`mkpasswd -s 0 -l 10`</span><br><span class="line"> <span class="comment">#从标准输入中读取密码进行修改（不安全）</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$p</span>|passwd --stdin user_<span class="variable">$u</span></span><br><span class="line"> <span class="comment">#常规修改密码</span></span><br><span class="line"> <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$p</span>\n<span class="variable">$p</span>&quot;</span>|passwd user_<span class="variable">$u</span></span><br><span class="line"> <span class="comment">#将创建的用户及对应的密码记录到日志文件中</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;user_<span class="variable">$u</span> <span class="variable">$p</span>&quot;</span> &gt;&gt; /tmp/userpassworddone</span><br></pre></td></tr></table></figure>

<h1 id="监控-httpd-的进程数，根据监控情况做相应处理"><a href="#监控-httpd-的进程数，根据监控情况做相应处理" class="headerlink" title="监控 httpd 的进程数，根据监控情况做相应处理"></a>监控 httpd 的进程数，根据监控情况做相应处理</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">###############################################################################################################################</span></span><br><span class="line"><span class="comment">#需求：</span></span><br><span class="line"><span class="comment">#1.每隔10s监控httpd的进程数，若进程数大于等于500，则自动重启Apache服务，并检测服务是否重启成功</span></span><br><span class="line"><span class="comment">#2.若未成功则需要再次启动，若重启5次依旧没有成功，则向管理员发送告警邮件，并退出检测</span></span><br><span class="line"><span class="comment">#3.如果启动成功，则等待1分钟后再次检测httpd进程数，若进程数正常，则恢复正常检测（10s一次），否则放弃重启并向管理员发送告警邮件，并退出检测</span></span><br><span class="line"><span class="comment">###############################################################################################################################</span></span><br><span class="line"><span class="comment">#计数器函数</span></span><br><span class="line">check_service()</span><br><span class="line">&#123;</span><br><span class="line"> j=0</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> <span class="comment">#重启Apache的命令</span></span><br><span class="line"> /usr/<span class="built_in">local</span>/apache2/bin/apachectl restart 2&gt; /var/<span class="built_in">log</span>/httpderr.log</span><br><span class="line">    <span class="comment">#判断服务是否重启成功</span></span><br><span class="line"> <span class="keyword">if</span> [ $? -eq 0 ] <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">break</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> j=$[<span class="variable">$j</span>+1] <span class="keyword">fi</span></span><br><span class="line">    <span class="comment">#判断服务是否已尝试重启5次</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$j</span> -eq 5 ] <span class="keyword">then</span></span><br><span class="line"> mail.py <span class="built_in">exit</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">done</span> &#125;<span class="keyword">while</span> :<span class="keyword">do</span></span><br><span class="line"> n=`pgrep -l httpd|wc -l`</span><br><span class="line"> <span class="comment">#判断httpd服务进程数是否超过500</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$n</span> -gt 500 ] <span class="keyword">then</span></span><br><span class="line"> /usr/<span class="built_in">local</span>/apache2/bin/apachectl restart</span><br><span class="line"> <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> check_service</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> sleep 60</span><br><span class="line"> n2=`pgrep -l httpd|wc -l`</span><br><span class="line"> <span class="comment">#判断重启后是否依旧超过500</span></span><br><span class="line">             <span class="keyword">if</span> [ <span class="variable">$n2</span> -gt 500 ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> mail.py <span class="built_in">exit</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="comment">#每隔10s检测一次</span></span><br><span class="line"> sleep 10</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="批量修改服务器用户密码"><a href="#批量修改服务器用户密码" class="headerlink" title="批量修改服务器用户密码"></a>批量修改服务器用户密码</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux主机SSH连接信息：旧密码</span></span><br><span class="line"><span class="comment"># cat old_pass.txt</span></span><br><span class="line"><span class="comment"># 192.168.18.217  root    123456     22</span></span><br><span class="line"><span class="comment"># 192.168.18.218  root    123456     22</span></span><br><span class="line"><span class="comment"># 内容格式：IP User Password Port</span></span><br><span class="line"><span class="comment"># SSH远程修改密码脚本：新密码随机生成</span></span><br><span class="line"><span class="comment"># https://www.linuxprobe.com/books</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">OLD_INFO=old_pass.txt</span><br><span class="line">NEW_INFO=new_pass.txt</span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> $(awk <span class="string">&#x27;/^[^#]/&#123;print $1&#125;&#x27;</span> <span class="variable">$OLD_INFO</span>); <span class="keyword">do</span></span><br><span class="line">    USER=$(awk -v I=<span class="variable">$IP</span> <span class="string">&#x27;I==$1&#123;print $2&#125;&#x27;</span> <span class="variable">$OLD_INFO</span>)</span><br><span class="line">    PASS=$(awk -v I=<span class="variable">$IP</span> <span class="string">&#x27;I==$1&#123;print $3&#125;&#x27;</span> <span class="variable">$OLD_INFO</span>)</span><br><span class="line">    PORT=$(awk -v I=<span class="variable">$IP</span> <span class="string">&#x27;I==$1&#123;print $4&#125;&#x27;</span> <span class="variable">$OLD_INFO</span>)</span><br><span class="line">    NEW_PASS=$(mkpasswd -l 8)  <span class="comment"># 随机密码</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$IP</span>   <span class="variable">$USER</span>   <span class="variable">$NEW_PASS</span>   <span class="variable">$PORT</span>&quot;</span> &gt;&gt; <span class="variable">$NEW_INFO</span></span><br><span class="line">    expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">    spawn ssh -p<span class="variable">$PORT</span> <span class="variable">$USER</span>@<span class="variable">$IP</span></span></span><br><span class="line"><span class="string">    set timeout 2</span></span><br><span class="line"><span class="string">    expect &#123;</span></span><br><span class="line"><span class="string">        \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">        \&quot;password:\&quot; &#123;send \&quot;<span class="variable">$PASS</span>\r\&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">        \&quot;<span class="variable">$USER</span>@*\&quot; &#123;send \&quot;echo \&#x27;<span class="variable">$NEW_PASS</span>\&#x27; |passwd --stdin <span class="variable">$USER</span>\r exit\r\&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">    &#125;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 生成新密码文件：</span></span><br><span class="line"><span class="comment"># cat new_pass.txt</span></span><br><span class="line"><span class="comment"># 192.168.18.217  root    n8wX3mU%      22</span></span><br><span class="line"><span class="comment"># 192.168.18.218  root    c87;ZnnL      22</span></span><br></pre></td></tr></table></figure>

<h1 id="iptables-自动屏蔽访问网站频繁的-IP"><a href="#iptables-自动屏蔽访问网站频繁的-IP" class="headerlink" title="iptables 自动屏蔽访问网站频繁的 IP"></a>iptables 自动屏蔽访问网站频繁的 IP</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 场景：恶意访问,安全防范</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1）屏蔽每分钟访问超过200的IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：根据访问日志（Nginx为例）</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date +%d/%b/%Y:%H:%M)</span><br><span class="line">ABNORMAL_IP=$(tail -n5000 access.log |grep <span class="variable">$DATE</span> |awk <span class="string">&#x27;&#123;a[$1]++&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#先tail防止文件过大，读取慢，数字可调整每分钟最大的访问量。awk不能直接过滤日志，因为包含特殊字符。</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$ABNORMAL_IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $(iptables -vnL |grep -c <span class="string">&quot;<span class="variable">$IP</span>&quot;</span>) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        iptables -I INPUT -s <span class="variable">$IP</span> -j DROP    fidone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：通过TCP建立的连接</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ABNORMAL_IP=$(netstat -an |awk <span class="string">&#x27;$4~/:80$/ &amp;&amp; $6~/ESTABLISHED/&#123;gsub(/:[0-9]+/,&quot;&quot;,$5);&#123;a[$5]++&#125;&#125;END&#123;for(i in a)if(a[i]&gt;100)print i&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">#gsub是将第五列（客户端IP）的冒号和端口去掉</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$ABNORMAL_IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $(iptables -vnL |grep -c <span class="string">&quot;<span class="variable">$IP</span>&quot;</span>) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        iptables -I INPUT -s <span class="variable">$IP</span> -j DROP</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2）屏蔽每分钟SSH尝试登录超过10次的IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：通过lastb获取登录状态:</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date +<span class="string">&quot;%a %b %e %H:%M&quot;</span>) <span class="comment">#星期月天时分  %e单数字时显示7，而%d显示07</span></span><br><span class="line">ABNORMAL_IP=$(lastb |grep <span class="string">&quot;<span class="variable">$DATE</span>&quot;</span> |awk <span class="string">&#x27;&#123;a[$3]++&#125;END&#123;for(i in a)if(a[i]&gt;10)print i&#125;&#x27;</span>)<span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$ABNORMAL_IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $(iptables -vnL |grep -c <span class="string">&quot;<span class="variable">$IP</span>&quot;</span>) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        iptables -I INPUT -s <span class="variable">$IP</span> -j DROP    fidone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：通过日志获取登录状态</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date +<span class="string">&quot;%b %d %H&quot;</span>)</span><br><span class="line">ABNORMAL_IP=<span class="string">&quot;<span class="subst">$(tail -n10000 /var/log/auth.log |grep <span class="string">&quot;<span class="variable">$DATE</span>&quot;</span> |awk &#x27;/Failed/&#123;a[$(NF-3)</span>]++&#125;END&#123;for(i in a)if(a[i]&gt;5)print i&#125;&#x27;)&quot;</span></span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> <span class="variable">$ABNORMAL_IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $(iptables -vnL |grep -c <span class="string">&quot;<span class="variable">$IP</span>&quot;</span>) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        iptables -A INPUT -s <span class="variable">$IP</span> -j DROP</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date +<span class="string">&quot;%F %T&quot;</span>)</span> - iptables -A INPUT -s <span class="variable">$IP</span> -j DROP&quot;</span> &gt;&gt;~/ssh-login-limit.log</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="根据-web-访问日志，封禁请求量异常的-IP，如-IP-在半小时后恢复正常，则解除封禁"><a href="#根据-web-访问日志，封禁请求量异常的-IP，如-IP-在半小时后恢复正常，则解除封禁" class="headerlink" title="根据 web 访问日志，封禁请求量异常的 IP，如 IP 在半小时后恢复正常，则解除封禁"></a>根据 web 访问日志，封禁请求量异常的 IP，如 IP 在半小时后恢复正常，则解除封禁</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line"><span class="comment">#根据web访问日志，封禁请求量异常的IP，如IP在半小时后恢复正常，则解除封禁</span></span><br><span class="line"><span class="comment">####################################################################################</span></span><br><span class="line">logfile=/data/<span class="built_in">log</span>/access.log</span><br><span class="line"><span class="comment">#显示一分钟前的小时和分钟</span></span><br><span class="line">d1=`date -d <span class="string">&quot;-1 minute&quot;</span> +%H%M`</span><br><span class="line">d2=`date +%M`</span><br><span class="line">ipt=/sbin/iptables</span><br><span class="line">ips=/tmp/ips.txt</span><br><span class="line">block()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#将一分钟前的日志全部过滤出来并提取IP以及统计访问次数</span></span><br><span class="line"> grep <span class="string">&#x27;$d1:&#x27;</span> <span class="variable">$logfile</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|sort -n|uniq -c|sort -n &gt; <span class="variable">$ips</span></span><br><span class="line"> <span class="comment">#利用for循环将次数超过100的IP依次遍历出来并予以封禁</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> `awk <span class="string">&#x27;$1&gt;100 &#123;print $2&#125;&#x27;</span> <span class="variable">$ips</span>`</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> <span class="variable">$ipt</span> -I INPUT -p tcp --dport 80 -s <span class="variable">$i</span> -j REJECT</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;`date +%F-%T` <span class="variable">$i</span>&quot;</span> &gt;&gt; /tmp/badip.log</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line">unblock()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">#将封禁后所产生的pkts数量小于10的IP依次遍历予以解封</span></span><br><span class="line"> <span class="keyword">for</span> a <span class="keyword">in</span> `<span class="variable">$ipt</span> -nvL INPUT --line-numbers |grep <span class="string">&#x27;0.0.0.0/0&#x27;</span>|awk <span class="string">&#x27;$2&lt;10 &#123;print $1&#125;&#x27;</span>|sort -nr`</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> <span class="variable">$ipt</span> -D INPUT <span class="variable">$a</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="variable">$ipt</span> -Z</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#当时间在00分以及30分时执行解封函数</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$d2</span> -eq <span class="string">&quot;00&quot;</span> ] || [ <span class="variable">$d2</span> -eq <span class="string">&quot;30&quot;</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="comment">#要先解再封，因为刚刚封禁时产生的pkts数量很少</span></span><br><span class="line"> unblock</span><br><span class="line"> block</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> block</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h1 id="判断用户输入的是否为-IP-地址"><a href="#判断用户输入的是否为-IP-地址" class="headerlink" title="判断用户输入的是否为 IP 地址"></a>判断用户输入的是否为 IP 地址</h1><pre><code class="sh"># 方法1:
#!/bin/bash
function check_ip()&#123;
    IP=$1
    VALID_CHECK=$(echo $IP|awk -F. &#39;$1&lt; =255&amp;&amp;$2&lt;=255&amp;&amp;$3&lt;=255&amp;&amp;$4&lt;=255&#123;print &quot;yes&quot;&#125;&#39;)
    if echo $IP|grep -E &quot;^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$&quot;&gt;/dev/null; then
        if [ $VALID_CHECK == &quot;yes&quot; ]; then
            echo &quot;$IP available.&quot;
        else
            echo &quot;$IP not available!&quot;
        fi
    else
        echo &quot;Format error!&quot;
    fi
&#125;
# check_ip 192.168.1.1
# check_ip 256.1.1.1

# 方法2：
#!/bin/bash
function check_ip()&#123;
    IP=$1
    if [[ $IP =~ ^[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;$ ]]; then
        FIELD1=$(echo $IP|cut -d. -f1)
        FIELD2=$(echo $IP|cut -d. -f2)
        FIELD3=$(echo $IP|cut -d. -f3)
        FIELD4=$(echo $IP|cut -d. -f4)
        if [ $FIELD1 -le 255 -a $FIELD2 -le 255 -a $FIELD3 -le 255 -a $FIELD4 -le 255 ]; then
            echo &quot;$IP available.&quot;
        else
            echo &quot;$IP not available!&quot;
        fi
    else
        echo &quot;Format error!&quot;
    fi
&#125;
# check_ip 192.168.1.1
# check_ip 256.1.1.1</code></pre>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>构建一个脚手架cli</title>
    <url>/2020/12/30/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6cli/</url>
    <content><![CDATA[<h1 id="构建一个脚手"><a href="#构建一个脚手" class="headerlink" title="构建一个脚手"></a>构建一个脚手</h1><p>  记录一下自己构建的一个脚手架cli的步骤，使用node的ssh自动拉取一下文件，并给与用户已反馈！！！！</p>
<h2 id="开始构件准备"><a href="#开始构件准备" class="headerlink" title="开始构件准备"></a>开始构件准备</h2><ol>
<li><p>电脑需要有node</p>
</li>
<li><p>编辑器</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2></li>
<li><p>mkdir 创建一个文件夹 xxx-cli</p>
</li>
<li><p>cd 进入该文件</p>
</li>
<li><p>npm init -y 初始化一个项目</p>
<p>  在package.json 添加入口文件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">  &quot;xxx-cli&quot;: &quot;.&#x2F;bin&#x2F;index&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mdir bin 在根目录下创建一个bin目录,并创建index文件不要后缀名;并添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定脚本解释器为node</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class="line">console.log(&#39;cli.....&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在终端执行，npm link;</p>
<p> 就可以通过npm 建立一个link对于bin/index里面的文件；<br> 在终端输入xxx就可以打印里面的文件！</p>
</li>
<li><p>安装依赖</p>
<ul>
<li>commander // node命令行操作</li>
<li>chakl // 打印彩色提示</li>
<li>clear // 清除</li>
<li>download-git-repo // 拉取git模板</li>
<li>handlebars // 语义化模板</li>
<li>inquirer // 终端交互</li>
<li>open // 自动打开浏览器</li>
<li>ora // 加载中</li>
<li>figlet // 字体样式</li>
</ul>
</li>
<li><p>打开bin/index 编写入口</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定脚本解释器为node</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class="line">const program &#x3D; require(&#39;commander&#39;); &#x2F;&#x2F; 引入node模板终端</span><br><span class="line">program.version(require(&#39;..&#x2F;package.json&#39;).version); &#x2F;&#x2F; 提示版本</span><br><span class="line">program.usage(&#39;&lt;command&gt; [option]&#39;) &#x2F;&#x2F; 命令提示</span><br><span class="line">  .command(&#39;create &lt;name&gt;&#39;) &#x2F;&#x2F; create &lt;xxx(为变量)&gt; </span><br><span class="line">  .description(&#39;create project&#39;) &#x2F;&#x2F; 描述</span><br><span class="line">  .action(require(&#39;.&#x2F;init.js&#39;)) &#x2F;&#x2F; 加载执行函数</span><br><span class="line">program.parse(process.argv); &#x2F;&#x2F; 传入参数</span><br></pre></td></tr></table></figure></li>
<li><p>建立执行函数 init.js；</p>
<p> 执行逻辑，先打印欢迎信息-在选择模板-下载模板</p>
<ul>
<li>打印欢迎页<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123;promisify&#125; &#x3D; require(&#39;util&#39;) &#x2F;&#x2F; 引入异步函数</span><br><span class="line">const figlet &#x3D; promisify(require(&#39;figlet&#39;)) &#x2F;&#x2F; 打印欢迎页</span><br><span class="line">const clear &#x3D; require(&#39;clear&#39;) &#x2F;&#x2F; 清屏</span><br><span class="line">const chalk &#x3D; require(&#39;chalk&#39;) &#x2F;&#x2F; 粉笔</span><br><span class="line">const log &#x3D; content &#x3D;&gt; console.log(chalk.green(content))</span><br><span class="line">module.exports &#x3D; async name &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 打印欢迎画面</span><br><span class="line">  clear()</span><br><span class="line">  const data &#x3D; await figlet(&#39;XXX Welcome&#39;)</span><br><span class="line">  log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>选择模板这里使用<a href="https://www.npmjs.com/package/inquirer">inquirer</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 构件模板数据</span><br><span class="line"> const presetPrompt &#x3D; &#123; </span><br><span class="line">  name: &#39;preset&#39;, &#x2F;&#x2F; 名字</span><br><span class="line">  type: &#39;list&#39;, &#x2F;&#x2F; 类型</span><br><span class="line">  message: &#96;请选择你要获取的模板类型:&#96;, &#x2F;&#x2F; 描述信息</span><br><span class="line">  choices: [ &#x2F;&#x2F; 选择项</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;vue2.0+ele&#39;, &#x2F;&#x2F; 展示的名字</span><br><span class="line">      value: &#39;vue2.0&#39; &#x2F;&#x2F; 获取的值</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;vue3.0+and-vue&#39;,</span><br><span class="line">      value: &#39;vue3.0&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;react+and&#39;,</span><br><span class="line">      value: &#39;react&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">const answers &#x3D; await inquirer.prompt (presetPrompt) &#x2F;&#x2F; 将选择模板，对应到终端中</span><br><span class="line">&#x2F;&#x2F; answers.preset 就是模板里面的value</span><br><span class="line">log(&#96;创建$&#123;answers.preset&#125;项目：$&#123;name&#125;&#96;)</span><br><span class="line">&#x2F;&#x2F; 判断preset的值，对应获取下载文件地址</span><br><span class="line">let url &#x3D; &#39;&#39;;</span><br><span class="line">switch (answers.preset) &#123;</span><br><span class="line">  case &#39;vue2.0&#39;:</span><br><span class="line">    url &#x3D; &#39;xxx&#39;;</span><br><span class="line">    break;</span><br><span class="line">  case &#39;vue3.0&#39;:</span><br><span class="line">    url &#x3D; &#39;&#39;;</span><br><span class="line">    break;</span><br><span class="line">  case &#39;react&#39;:</span><br><span class="line">    url &#x3D; &#39;&#39;;</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">if (!url) &#123;</span><br><span class="line">  console.log(chalk.red(&#39;项目正在构件中。。。&#39;));</span><br><span class="line">  return false;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F; 下载模板</span><br><span class="line">let isSuccess &#x3D; await clone(url, name)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>创建download.js,抛出clone方法,使用<a href="https://www.npmjs.com/package/download-git-repo">download-git-repo</a>拉取模板<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; promisify &#125; &#x3D; require(&#39;util&#39;); &#x2F;&#x2F; 引入异步</span><br><span class="line">module.exports.clone &#x3D; async function (repo, desc) &#123;</span><br><span class="line">  const download &#x3D; promisify(require(&#39;download-git-repo&#39;)); &#x2F;&#x2F; 异步使用download-git-repo</span><br><span class="line">  const ora &#x3D; require(&#39;ora&#39;); &#x2F;&#x2F; 打印下载进度</span><br><span class="line">  const process &#x3D; ora(&#96;下载中...&#96;);</span><br><span class="line">  process.start();</span><br><span class="line">  &#x2F;&#x2F; 容错处理</span><br><span class="line">  try &#123;</span><br><span class="line">    await download(repo, desc);</span><br><span class="line">    process.succeed(&#39;下载成功！&#39;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">    process.fail(&#39;下载失败！&#39;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>下载完成,打印提示信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isSuccess) &#123;</span><br><span class="line">  log(chalk.green(&#96;</span><br><span class="line">    拉取完成：</span><br><span class="line">    To get Start：</span><br><span class="line">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      cd $&#123;name&#125;</span><br><span class="line">      npm install 或者 yarn add  下载依赖</span><br><span class="line">      npm run dev</span><br><span class="line">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      &#96;))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        log(chalk.red(&#96;</span><br><span class="line">    拉取失败：</span><br><span class="line">    请检查网络或稍后再试</span><br><span class="line">      &#96;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>cli</category>
      </categories>
      <tags>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>ESXi给欧拉系统扩容</title>
    <url>/2023/06/26/ESXi%E7%BB%99%E6%AC%A7%E6%8B%89%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="ESXi给欧拉系统扩容从100G-200G"><a href="#ESXi给欧拉系统扩容从100G-200G" class="headerlink" title="ESXi给欧拉系统扩容从100G~200G"></a>ESXi给欧拉系统扩容从100G~200G</h1><h2 id="登录管理平台，找到虚拟机，关闭电源"><a href="#登录管理平台，找到虚拟机，关闭电源" class="headerlink" title="登录管理平台，找到虚拟机，关闭电源"></a>登录管理平台，找到虚拟机，关闭电源</h2><h2 id="点击编辑-gt-硬盘100G-改为200G（如果报错，请先删除快照）"><a href="#点击编辑-gt-硬盘100G-改为200G（如果报错，请先删除快照）" class="headerlink" title="点击编辑 -&gt; 硬盘100G 改为200G（如果报错，请先删除快照）"></a>点击编辑 -&gt; 硬盘100G 改为200G（如果报错，请先删除快照）</h2><h2 id="开机执行一下命令"><a href="#开机执行一下命令" class="headerlink" title="开机执行一下命令"></a>开机执行一下命令</h2><ul>
<li>lsblk [查看磁盘分配]</li>
<li>fdisk - l [查看现有磁盘空间]<h2 id="创建新的磁盘"><a href="#创建新的磁盘" class="headerlink" title="创建新的磁盘"></a>创建新的磁盘</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建分区命令</span><br><span class="line"> fdisk &#x2F;dev&#x2F;sda</span><br><span class="line"> 再输入p</span><br><span class="line"> 新增分区输入：n</span><br><span class="line"> 回车（默认为主分区primary）</span><br><span class="line"> 分区号，起始扇区，结束扇区都默认（回车）</span><br><span class="line"> 设置分区格式输入：t</span><br><span class="line"> 分区号默认（回车）</span><br><span class="line"> Hex 代码为 8e （8e代表Linux LVM分区类型）</span><br><span class="line"> w （写入分区表）</span><br><span class="line"> 等待分区完成</span><br></pre></td></tr></table></figure>
<h2 id="格式化新分区"><a href="#格式化新分区" class="headerlink" title="格式化新分区"></a>格式化新分区</h2><ul>
<li>lsblk -f [查看分区格式]</li>
<li>mkfs.ext4 /dev/sda3 [这里新建几就是几]</li>
</ul>
<h2 id="合并分区"><a href="#合并分区" class="headerlink" title="合并分区"></a>合并分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># lvm  </span><br><span class="line"># 创建pv，输入y确认 </span><br><span class="line">lvm&gt; pvcreate &#x2F;dev&#x2F;sda3</span><br><span class="line"># 这里的名字，可以通过，下面的命令，找到 </span><br><span class="line">lvm&gt; vgextend centos &#x2F;dev&#x2F;sda3</span><br><span class="line"># 查看一下当前的Volume卷详情   </span><br><span class="line">lvm&gt; vgdisplay -v</span><br><span class="line"># 磁盘融合，下面的指定容量和路劲，上面的命令可以看到</span><br><span class="line">lvm&gt; lvextend -l+136446 &#x2F;dev&#x2F;mapper&#x2F;centos-root</span><br><span class="line"># 推出</span><br><span class="line">lvm&gt; quit</span><br><span class="line"># 系统识别新的存储</span><br><span class="line"># 如果使用xfs文件系统</span><br><span class="line">xfs_growfs &#x2F;dev&#x2F;root_vg&#x2F;root</span><br><span class="line"># 如果使用ext4文件系统</span><br><span class="line">resize2fs &#x2F;dev&#x2F;root_vg&#x2F;root</span><br></pre></td></tr></table></figure>

<h2 id="df-h-查看应该就成功了"><a href="#df-h-查看应该就成功了" class="headerlink" title="df -h 查看应该就成功了"></a>df -h 查看应该就成功了</h2>]]></content>
  </entry>
  <entry>
    <title>记录配置nacos集群使用的问题</title>
    <url>/2023/03/23/%E8%AE%B0%E5%BD%95%E9%85%8D%E7%BD%AEnacos%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="nacos集群-nginx代理"><a href="#nacos集群-nginx代理" class="headerlink" title="nacos集群+nginx代理"></a>nacos集群+nginx代理</h1><p>nacos之前单个部署,服务读取配置文件没有问题。现在是 nacos 集群又加 nginx 转换发现读取不到信息！需要nginx使用stream 多代理出来 7848，9848，9849；</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul>
<li>126 8848 nginx</li>
<li>126 18848 nacos</li>
<li>101 18848 nacos</li>
<li>102 18848 nacos</li>
</ul>
<hr>
<p>以上 126，101，102 是组成 nacos 集群，126 使用 nginx 负载代理作为 nacos 的入口</p>
<h3 id="nginx-配置如下"><a href="#nginx-配置如下" class="headerlink" title="nginx 配置如下"></a>nginx 配置如下</h3><ul>
<li>nginx.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log notice;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"># tcp服务</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format  main  &#39;$remote_addr [$time_local] &#39;</span><br><span class="line">                 &#39;$protocol $status $bytes_sent $bytes_received &#39;</span><br><span class="line">                 &#39;$session_time&#39;;</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;stream-access.log main;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.stream; #stream的配置目录</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">     server_tokens off; #隐藏服务器的版本</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    fastcgi_buffers 8 102400k;</span><br><span class="line">    tcp_nodelay on;  #提高i&#x2F;o性能，可以设置在http，server，location字段标签里</span><br><span class="line">    client_max_body_size 50m;  #默认是1m，上传文件大小的限制</span><br><span class="line">    client_header_timeout 1000; #默认60s，读取客户端请求头数据的超时时间，若超过这个时间，客户端还没有发送完整的header数据，服务器端将返回&quot;Request timo out(408)&quot;错误。</span><br><span class="line">    client_body_timeout 1000; #默认60s，用于设置读取客户端请求主体的超时时间，仅仅为俩次成功的读取操作之间的一个超时，非请求整个主体数据的超时时间。如果在这个超时时间内，客户端没有发 人和数据，nginx将返回&quot;Request timo out(408)&quot;错误</span><br><span class="line">    send_timeout 1000;  #默认是60s，服务器传送http响应信息到客户端的超时时间，这个超时仅仅为俩次成功握手后的一个超时，非请求整个响应数据的超时时间，如果在这个超时时间内，客户端没有接收任何数据，链接将被关闭。</span><br><span class="line">    gzip on; #开启gzip</span><br><span class="line">    gzip_disable &quot;msie6&quot;; #IE6不使用gzip</span><br><span class="line">    gzip_vary on; #设置为on会在Header里增加 &quot;Vary: Accept-Encoding&quot;</span><br><span class="line">    gzip_proxied any; #代理结果数据的压缩</span><br><span class="line">    gzip_comp_level 6; #gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值</span><br><span class="line">    gzip_buffers 16 8k; #获取多少内存用于缓存压缩结果</span><br><span class="line">    gzip_http_version 1.1; #识别http协议的版本</span><br><span class="line">    gzip_min_length 1k; #设置允许压缩的页面最小字节数，超过1k的文件会被压缩</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;json text&#x2F;css; #对特定的MIME类型生效,js和css文件会被压缩</span><br><span class="line">    proxy_read_timeout 1240s; #默认值是 60s ，我们可以设置为240s,或者300s。来应对上游服务器处理请求慢的问题</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>conf.d 里面的 *.conf 配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream myServer &#123;</span><br><span class="line">	server  192.168.90.126:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">	server  192.168.90.101:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s ;</span><br><span class="line">	server  192.168.90.102:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s ;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">         listen       8848;</span><br><span class="line">         server_name  192.168.90.126;</span><br><span class="line">         client_max_body_size 1024m;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">		proxy_pass http:&#x2F;&#x2F;myServer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>conf.d 里面的 *.stream 配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nacos7848.stream</span><br><span class="line">upstream myServer7848 &#123;</span><br><span class="line">    server  192.168.90.126:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       7848;</span><br><span class="line">    proxy_pass myServer7848;</span><br><span class="line">&#125;</span><br><span class="line"># nacos9848.stream</span><br><span class="line">upstream myServer9848 &#123;</span><br><span class="line">    server  192.168.90.126:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9848;</span><br><span class="line">    proxy_pass myServer9848;</span><br><span class="line">&#125;</span><br><span class="line">#nacos9849.stream</span><br><span class="line">upstream myServer9849 &#123;</span><br><span class="line">    server  192.168.90.126:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9849;</span><br><span class="line">    proxy_pass myServer9848;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
