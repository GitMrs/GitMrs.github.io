<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过hexo-cli + gitPage 构件博客项目</title>
    <url>/2020/12/16/hexo_blog/</url>
    <content><![CDATA[<ol>
<li><p>mkdir blog  建立一个文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure></li>
<li><p>npm install hexo-cli -g 全局安装hexo-cli</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd mkdir</span><br><span class="line">npm install hexo-cli -g </span><br></pre></td></tr></table></figure></li>
<li><p>hexo init client 初始化一个hexo项目，项目名为client</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init client</span><br></pre></td></tr></table></figure></li>
<li><p>hexo new 第一篇文章 编写一个文章，存在source_posts文件下，生成一个xxx.md</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 第一篇文章 </span><br></pre></td></tr></table></figure></li>
<li><p>source_posts文件就是博客的文章内容，自己可以创建，或者直接删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文章格式</span><br><span class="line">---</span><br><span class="line">title: 第一篇文章 &#x2F;&#x2F; 标题</span><br><span class="line">date: 2020-12-16 11:45:45 &#x2F;&#x2F; 时间</span><br><span class="line">categories: &#x2F;&#x2F; 文件分类</span><br><span class="line">tags: &#x2F;&#x2F; 分类标签</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入<a href="https://hexo.io/themes/">hexo主题官网</a></p>
</li>
<li><p>选择喜欢主题</p>
</li>
<li><p>点击进入github里面</p>
</li>
<li><p>在自己的blog里面，git clone <a href="https://github.com/Fechin/hexo-theme-diaspora">https://github.com/Fechin/hexo-theme-diaspora</a>  themes/diaspora 执行该命令！（感谢，<a href="https://github.com/Fechin">Fechin</a>的无私开源）</p>
</li>
<li><p>这个主题的具体配置可参考<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a></p>
</li>
</ol>
<ol start="11">
<li><p>首先在git上创建一个自己的仓库，仓库名称为GitMrs(自己的用户名).github.io；</p>
</li>
<li><p>进入到hexo的配置文件_config.yml配置git信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 找到这个配置</span><br><span class="line">deploy</span><br><span class="line">  type: &#39;git&#39; &#x2F;&#x2F; 类型</span><br><span class="line">  repo: git@github.com:GitMrs&#x2F;GitMrs.github.io.git &#x2F;&#x2F; 仓库地址</span><br><span class="line">  branch: master &#x2F;&#x2F; 分支</span><br></pre></td></tr></table></figure></li>
<li><p>npm install hexo-deployer-git -s 安装hexo发布模块</p>
</li>
<li><p>hexo generate // 打包单页应用</p>
</li>
<li><p>执行 hexo deploy // 发布上线（一般两次发布时间需要间隔2分钟！否则会提示没有权限）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker搭建企业版orcal</title>
    <url>/2023/03/22/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAorcal%E4%BC%81%E4%B8%9A%E7%89%88/</url>
    <content><![CDATA[<h2 id="拉取镜像并启动"><a href="#拉取镜像并启动" class="headerlink" title="拉取镜像并启动"></a>拉取镜像并启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name oracle19c -p 1521:1521 -p 5500:5500 --privileged=<span class="literal">true</span> -it -v /opt/soft/db/oracle/:/var/opt/oracle/data -e TZ=Asia/Chongqing registry.cn-beijing.aliyuncs.com/zhouchaoyi/oracle19c:19.3 </span><br></pre></td></tr></table></figure>
<h2 id="进入镜像内部"><a href="#进入镜像内部" class="headerlink" title="进入镜像内部"></a>进入镜像内部</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it oracle19c /bin/bash </span><br></pre></td></tr></table></figure>
<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setPassword.sh 123456</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep $ORACLE_HOME &#x2F;etc&#x2F;oratab | cut -d: -f1 </span><br><span class="line">export ORACLE_SID&#x3D;ORCLCDB </span><br></pre></td></tr></table></figure>
<h2 id="登录orcal"><a href="#登录orcal" class="headerlink" title="登录orcal"></a>登录orcal</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus &#x2F; as sysdba </span><br><span class="line">show pdbs; </span><br><span class="line">alter session set container&#x3D;ORCLPDB1;</span><br></pre></td></tr></table></figure>
<h2 id="重启一下docker"><a href="#重启一下docker" class="headerlink" title="重启一下docker"></a>重启一下docker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart oracle19c</span><br></pre></td></tr></table></figure>
<h2 id="部署完成，使用Navicat-连接测试"><a href="#部署完成，使用Navicat-连接测试" class="headerlink" title="部署完成，使用Navicat 连接测试"></a>部署完成，使用Navicat 连接测试</h2><ul>
<li>主机 127.0.0.1</li>
<li>端口 1521</li>
<li>服务名 ORCLPDB1</li>
<li>用户名 system</li>
<li>密码 123456</li>
</ul>
<h2 id="登录orcal管理页面验证"><a href="#登录orcal管理页面验证" class="headerlink" title="登录orcal管理页面验证"></a>登录orcal管理页面验证</h2><ul>
<li><a href="https://127.0.0.1:5500/em/">https://127.0.0.1:5500/em/</a></li>
</ul>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加live2D</title>
    <url>/2020/12/31/hexo%E6%B7%BB%E5%8A%A0live2D/</url>
    <content><![CDATA[<h2 id="给-hexo-博客添加-live2d，可爱的看板娘！"><a href="#给-hexo-博客添加-live2d，可爱的看板娘！" class="headerlink" title="给 hexo 博客添加 live2d，可爱的看板娘！"></a>给 hexo 博客添加 live2d，可爱的看板娘！</h2><h3 id="使用官方简单办法"><a href="#使用官方简单办法" class="headerlink" title="使用官方简单办法"></a>使用官方简单办法</h3><ol>
<li><p>安装 hexo-helper-live2d 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add hexo-helper-live2d</span><br></pre></td></tr></table></figure></li>
<li><p>安装 live2d 模型，模型有肯定可供选择具体可以<a href="https://huaji8.top/post/live2d-plugin-2.0/">查看</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yarn add live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 hexo 配置__config.yml 项中新增 live2d 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">    enable: true</span><br><span class="line">    scriptFrom: local</span><br><span class="line">    pluginRootPath: live2dw&#x2F;</span><br><span class="line">    pluginJsPath: lib&#x2F;</span><br><span class="line">    pluginModelPath: assets&#x2F;</span><br><span class="line">    tagMode: false</span><br><span class="line">    debug: false</span><br><span class="line">    model:</span><br><span class="line">      use: live2d-widget-model-shizuku</span><br><span class="line">    display:</span><br><span class="line">      position: right</span><br><span class="line">      width: 300</span><br><span class="line">      height: 600</span><br><span class="line">    mobile:</span><br><span class="line">      show: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="根据hexo-theme-diaspora这个主题使用大神定制版的看板娘"><a href="#根据hexo-theme-diaspora这个主题使用大神定制版的看板娘" class="headerlink" title="根据hexo-theme-diaspora这个主题使用大神定制版的看板娘"></a>根据<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a>这个主题使用大神定制版的<a href="https://github.com/stevenjoezhang/live2d-widget">看板娘</a></h2><h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><ol>
<li>找到 themes/diaspora/layout/_partial/head.ejs 头部引入模板,再 head 标签里面引入字体样式，和 live2d 线上 js 即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启服务，即可</li>
</ol>
<h3 id="定制用法"><a href="#定制用法" class="headerlink" title="定制用法"></a>定制用法</h3><ol>
<li>找到 themes/diaspora/layout/_partial/head.ejs 头部引入模板,再 head 标签里面引入字体样式，本地自己引入配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&gt;</span><br></pre></td></tr></table></figure></li>
<li>打开<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a>,将该项目下载下来，修改名字为 live2d 放到<br>/themes/diaspora/source 目录中</li>
<li>打开/themes/diaspora/source/live2d;文件中的 autoload.js,修改文件 live2d_path<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意：live2d_path 参数应使用绝对路径</span><br><span class="line">&#x2F;&#x2F; const live2d_path &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;&quot;;</span><br><span class="line">const live2d_path &#x3D; &quot;&#x2F;live2d&#x2F;&quot;; &#x2F;&#x2F; 此处修改的名字和文件名保持一致！</span><br></pre></td></tr></table></figure></li>
<li>找到 themes/diaspora/layout/_partial/scripts.ejs 脚本引入模板,在 js 引入列表中添加刚才修改的文件路径,下面 live2d/autoload.js 是新增的！<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.gitalk.enable)&#123; %&gt;&lt;%- js([&#39;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&#39;])%&gt;&lt;%&#125;%&gt;</span><br><span class="line">&lt;%- js([&#39;&#x2F;&#x2F;lib.baomitu.com&#x2F;jquery&#x2F;1.8.3&#x2F;jquery.min.js&#39;, &#39;js&#x2F;plugin.js&#39;, &#39;js&#x2F;typed.js&#39;, &#39;js&#x2F;diaspora.js&#39;,&#39;live2d&#x2F;autoload.js&#39;])%&gt;</span><br><span class="line">&lt;%- partial(&#39;photoswipe&#39;) %&gt;</span><br></pre></td></tr></table></figure></li>
<li>重启服务既可以看到了！</li>
</ol>
<h1 id="部分小问题"><a href="#部分小问题" class="headerlink" title="部分小问题"></a>部分小问题</h1><ul>
<li><p>在<a href="https://github.com/Fechin/hexo-theme-diaspora">hexo-theme-diaspora</a>这个主题中，看板娘被图片挡住！</p>
<p>修改/themes/diaspora/source/live2d 下的 waifu.css;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#waifu &#123;</span><br><span class="line">  bottom: -1000px;</span><br><span class="line">  left: 0;</span><br><span class="line">  line-height: 0;</span><br><span class="line">  margin-bottom: -10px;</span><br><span class="line">  position: fixed;</span><br><span class="line">  transform: translateY(3px);</span><br><span class="line">  transition: transform .3s ease-in-out, bottom 3s ease-in-out;</span><br><span class="line">  z-index: 6; &#x2F;&#x2F; 原本是1，修改大于6即可</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动端不显示</p>
<p>修改 themes/diaspora/sourcelive2d 下的 autoload.js 文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 此处判断屏幕宽度，大于768显示；注释掉判断就可全部显示</span><br><span class="line">&#x2F;&#x2F; if (screen.width &gt;&#x3D; 768) &#123;</span><br><span class="line">  Promise.all([</span><br><span class="line">    loadExternalResource(live2d_path + &quot;waifu.css&quot;, &quot;css&quot;),</span><br><span class="line">    loadExternalResource(live2d_path + &quot;live2d.min.js&quot;, &quot;js&quot;),</span><br><span class="line">    loadExternalResource(live2d_path + &quot;waifu-tips.js&quot;, &quot;js&quot;)</span><br><span class="line">  ]).then(() &#x3D;&gt; &#123;</span><br><span class="line">    initWidget(&#123;</span><br><span class="line">      waifuPath: live2d_path + &quot;waifu-tips.json&quot;,</span><br><span class="line">      &#x2F;&#x2F;apiPath: &quot;https:&#x2F;&#x2F;live2d.fghrsh.net&#x2F;api&#x2F;&quot;,</span><br><span class="line">      cdnPath: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;fghrsh&#x2F;live2d_api&#x2F;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins 项目配置</title>
    <url>/2022/08/15/jenkins%20%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>jenkins 项目配置，默认已经配好 nginx；项目目录都已经创建好！</p>
<h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="创建一个-item，选择-Freestyle-project-模式"><a href="#创建一个-item，选择-Freestyle-project-模式" class="headerlink" title="创建一个 item，选择 Freestyle project 模式"></a>创建一个 item，选择 Freestyle project 模式</h3><h3 id="源码管理-git"><a href="#源码管理-git" class="headerlink" title="源码管理 git"></a>源码管理 git</h3><ul>
<li>填写 git 地址</li>
<li>密码</li>
<li>指定分支</li>
</ul>
<h3 id="增加构建步骤"><a href="#增加构建步骤" class="headerlink" title="增加构建步骤"></a>增加构建步骤</h3><ul>
<li>Execute shell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm -rf yarn.lock</span><br><span class="line">yarn</span><br><span class="line">yarn build</span><br><span class="line">cp -r ./dist ./home</span><br><span class="line">tar -zcvf dist.tar.gz ./dist</span><br><span class="line">mv /home/frontend/xdzq/web/home/ /home/frontend/xdzq/<span class="built_in">history</span>/home</span><br><span class="line">mv /home/frontend/xdzq/<span class="built_in">history</span>/home/home  /home/frontend/xdzq/<span class="built_in">history</span>/home/home$(date +%s)</span><br><span class="line">mv ./home /home/frontend/xdzq/web</span><br></pre></td></tr></table></figure>

<h3 id="推送到别的服务器"><a href="#推送到别的服务器" class="headerlink" title="推送到别的服务器"></a>推送到别的服务器</h3><ul>
<li>增加构建后操作步骤 -&gt; Send build artifacts over SSH</li>
<li>SSH Server<br>· Name 选择对应的服务器</li>
<li>Transfers<br>· Source files -&gt; 选择上面打包的 dist.tar.gz<br>· Remove prefix -&gt; 空<br>· Remote directory -&gt; 指定服务器的目录<br>· Exec command 服务的指令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/frontend/xdzq/web</span><br><span class="line">mv ./home  /home/frontend/xdzq/<span class="built_in">history</span>/home/</span><br><span class="line">mv /home/frontend/xdzq/<span class="built_in">history</span>/home/home  /home/frontend/xdzq/<span class="built_in">history</span>/home/home$(date +%s)</span><br><span class="line">tar -zxvf dist.tar.gz</span><br><span class="line">rm -rf  dist.tar.gz</span><br><span class="line">mv ./dist home</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vsCode插件开发</title>
    <url>/2021/01/04/vsCode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="记录一下vsCode-插件开发的流程"><a href="#记录一下vsCode-插件开发的流程" class="headerlink" title="记录一下vsCode 插件开发的流程"></a>记录一下vsCode 插件开发的流程</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>node 环境</li>
<li>npm 一般安装完node就自带了</li>
<li>vscode插件接口API</li>
<li>yeoman npm install -g yo</li>
<li>generator-code npm install -g generator-code<h2 id="开始搭建一个vsCode插件，起始项目"><a href="#开始搭建一个vsCode插件，起始项目" class="headerlink" title="开始搭建一个vsCode插件，起始项目"></a>开始搭建一个vsCode插件，起始项目</h2></li>
<li>开始搭建一个vsCode插件，起始项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yo code</span><br></pre></td></tr></table></figure></li>
<li>文件目录说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules &#x2F;&#x2F; 依赖</span><br><span class="line">test &#x2F;&#x2F; 测试文件</span><br><span class="line">CHANGELOG.md &#x2F;&#x2F; 文件变成说明</span><br><span class="line">extension.js &#x2F;&#x2F; 入口文件说明</span><br><span class="line">jsconfig.json &#x2F;&#x2F; javascript 配置</span><br><span class="line">README.md &#x2F;&#x2F; 插件说明</span><br><span class="line">vsc-extension-quickstart.md &#x2F;&#x2F; 使用说明</span><br></pre></td></tr></table></figure></li>
<li>package.json<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">  &quot;name&quot;: &quot;test&quot;, &#x2F;&#x2F; 项目名</span><br><span class="line">  &quot;displayName&quot;: &quot;test&quot;, &#x2F;&#x2F; 发布后商店里的名称</span><br><span class="line">  &quot;description&quot;: &quot;&quot;, &#x2F;&#x2F; 描述</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;, &#x2F;&#x2F; 版本</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;vscode&quot;: &quot;^1.52.0&quot;  &#x2F;&#x2F; 依赖环境</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;categories&quot;: [</span><br><span class="line">    &quot;Other&quot; &#x2F;&#x2F; 插件分类</span><br><span class="line">  ],</span><br><span class="line">  &quot;activationEvents&quot;: [ &#x2F;&#x2F; 插件激活的事件数组</span><br><span class="line">        &quot;onCommand:test.helloWorld&quot; </span><br><span class="line">  ],</span><br><span class="line">  &quot;main&quot;: &quot;.&#x2F;extension.js&quot;, &#x2F;&#x2F; 入口文件</span><br><span class="line">  &#x2F;&#x2F; 插件最多的配置项</span><br><span class="line">  &quot;contributes&quot;: &#123; </span><br><span class="line">    &#x2F;&#x2F; 命令</span><br><span class="line">    &quot;commands&quot;: [&#123;</span><br><span class="line">            &quot;command&quot;: &quot;test.helloWorld&quot;,</span><br><span class="line">            &quot;title&quot;: &quot;Hello World&quot;</span><br><span class="line"></span><br><span class="line">    &#125;],</span><br><span class="line">    &#x2F;&#x2F; 配置文件</span><br><span class="line">    &quot;configuration&quot;: [</span><br><span class="line">      &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;helloWorld&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123; &#x2F;&#x2F; 具体的配置参数</span><br><span class="line">        &quot;helloWorld.api&quot;:&#123;</span><br><span class="line">            &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">            &quot;default&quot;: &quot;helloWorld&quot;,</span><br><span class="line">            &quot;description&quot;: &quot;文字说明&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 执行代码</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;lint&quot;: &quot;eslint .&quot;,</span><br><span class="line">    &quot;pretest&quot;: &quot;yarn run lint&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;node .&#x2F;test&#x2F;runTest.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; 依赖</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">        &quot;@types&#x2F;vscode&quot;: &quot;^1.52.0&quot;,</span><br><span class="line">        &quot;@types&#x2F;glob&quot;: &quot;^7.1.3&quot;,</span><br><span class="line">        &quot;@types&#x2F;mocha&quot;: &quot;^8.0.4&quot;,</span><br><span class="line">        &quot;@types&#x2F;node&quot;: &quot;^12.11.7&quot;,</span><br><span class="line">        &quot;eslint&quot;: &quot;^7.15.0&quot;,</span><br><span class="line">        &quot;glob&quot;: &quot;^7.1.6&quot;,</span><br><span class="line">        &quot;mocha&quot;: &quot;^8.1.3&quot;,</span><br><span class="line">        &quot;typescript&quot;: &quot;^4.1.2&quot;,</span><br><span class="line">        &quot;vscode-test&quot;: &quot;^1.4.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开始编写一个基于hitokoto的插件"><a href="#开始编写一个基于hitokoto的插件" class="headerlink" title="开始编写一个基于hitokoto的插件"></a>开始编写一个基于hitokoto的插件</h2></li>
<li>在package.json 中的contributes中配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &quot;contributes&quot;: &#123;</span><br><span class="line">  &quot;commands&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;command&quot;: &quot;extension.hitokoto&quot;,</span><br><span class="line">      &quot;title&quot;: &quot;hitokoto&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;configuration&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;hitokoto&quot;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;hitokoto.api&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">        &quot;default&quot;: &quot;https:&#x2F;&#x2F;v1.hitokoto.cn&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;hitokotoAPI接口地址&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;hitokoto.fontColor&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;string&quot;,</span><br><span class="line">        &quot;default&quot;: &quot;#ffffff&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;字体颜色(状态栏显示时有效)&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>代码编写<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const vscode &#x3D; require(&#39;vscode&#39;);</span><br><span class="line">const axios &#x3D; require(&#39;axios&#39;);</span><br><span class="line">&#x2F;**</span><br><span class="line">* @param &#123;vscode.ExtensionContext&#125; context</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 创建一个Bar存放文章</span><br><span class="line">const hitokotoBarItem &#x3D; vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活</span><br><span class="line">function activate(context) &#123;</span><br><span class="line">  &#x2F;&#x2F; 定义数据结构</span><br><span class="line">  const hitokoto &#x3D; &#123;</span><br><span class="line">    id: null,</span><br><span class="line">    intervalTimeFlag: null</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;&#x2F; 当ctrl+shift+p 输入时hitokoto时 都重新获取</span><br><span class="line">  let disposable &#x3D; vscode.commands.registerCommand(&#39;extension.hitokoto&#39;, function () &#123;</span><br><span class="line">    createHitokoto(hitokoto);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F; 当ctrl+shift+p 输入时refreshHitokoto时 都重新获取</span><br><span class="line">  const getText &#x3D; vscode.commands.registerCommand(&#39;extension.refreshHitokoto&#39;, function () &#123;</span><br><span class="line">    createHitokoto(hitokoto);</span><br><span class="line">  &#125;)</span><br><span class="line">  &#x2F;&#x2F; 将其放入context中</span><br><span class="line">  context.subscriptions.push(disposable);</span><br><span class="line">  context.subscriptions.push(getText)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 获取数据</span><br><span class="line">function createHitokoto(hitokoto) &#123;</span><br><span class="line">  const api &#x3D; vscode.workspace.getConfiguration().get(&#39;hitokoto.api&#39;);</span><br><span class="line">  axios.get(api).then(res &#x3D;&gt; &#123;</span><br><span class="line">    hitokoto[&#39;id&#39;] &#x3D; res.data.id;</span><br><span class="line">    showHitokoto(res.data);</span><br><span class="line">  &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">    vscode.window.showInformationMessage(&#39;API服务连接失败&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 展示出来</span><br><span class="line">function showHitokoto(data) &#123;</span><br><span class="line">  hitokotoBarItem.color &#x3D; vscode.workspace.getConfiguration().get(&#39;hitokoto.fontColor&#39;);</span><br><span class="line">  hitokotoBarItem.text &#x3D; &#96;$&#123;data.hitokoto&#125; --- $&#123;data.from&#125;&#96;;</span><br><span class="line">  hitokotoBarItem.command &#x3D; &#96;extension.refreshHitokoto&#96;;</span><br><span class="line">  hitokotoBarItem.tooltip &#x3D; &quot;点击刷新&quot;;</span><br><span class="line">  hitokotoBarItem.show();</span><br><span class="line">&#125;</span><br><span class="line">exports.activate &#x3D; activate;</span><br><span class="line">&#x2F;&#x2F; 插件被停用的时候被调用</span><br><span class="line">function deactivate() &#123; &#125;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  activate,</span><br><span class="line">  deactivate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>发布详细见<a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">vscode发布说明</a></li>
</ul>
]]></content>
      <categories>
        <category>cli</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>记录配置nacos集群使用的问题</title>
    <url>/2023/03/23/%E8%AE%B0%E5%BD%95%E9%85%8D%E7%BD%AEnacos%E9%9B%86%E7%BE%A4%E4%BD%BF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="nacos集群-nginx代理"><a href="#nacos集群-nginx代理" class="headerlink" title="nacos集群+nginx代理"></a>nacos集群+nginx代理</h1><p>nacos之前单个部署,服务读取配置文件没有问题。现在是 nacos 集群又加 nginx 转换发现读取不到信息！需要nginx使用stream 多代理出来 7848，9848，9849；</p>
<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ul>
<li>126 8848 nginx</li>
<li>126 18848 nacos</li>
<li>101 18848 nacos</li>
<li>102 18848 nacos</li>
</ul>
<hr>
<p>以上 126，101，102 是组成 nacos 集群，126 使用 nginx 负载代理作为 nacos 的入口</p>
<h3 id="nginx-配置如下"><a href="#nginx-配置如下" class="headerlink" title="nginx 配置如下"></a>nginx 配置如下</h3><ul>
<li>nginx.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log notice;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"># tcp服务</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format  main  &#39;$remote_addr [$time_local] &#39;</span><br><span class="line">                 &#39;$protocol $status $bytes_sent $bytes_received &#39;</span><br><span class="line">                 &#39;$session_time&#39;;</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;stream-access.log main;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.stream; #stream的配置目录</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">     server_tokens off; #隐藏服务器的版本</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    fastcgi_buffers 8 102400k;</span><br><span class="line">    tcp_nodelay on;  #提高i&#x2F;o性能，可以设置在http，server，location字段标签里</span><br><span class="line">    client_max_body_size 50m;  #默认是1m，上传文件大小的限制</span><br><span class="line">    client_header_timeout 1000; #默认60s，读取客户端请求头数据的超时时间，若超过这个时间，客户端还没有发送完整的header数据，服务器端将返回&quot;Request timo out(408)&quot;错误。</span><br><span class="line">    client_body_timeout 1000; #默认60s，用于设置读取客户端请求主体的超时时间，仅仅为俩次成功的读取操作之间的一个超时，非请求整个主体数据的超时时间。如果在这个超时时间内，客户端没有发 人和数据，nginx将返回&quot;Request timo out(408)&quot;错误</span><br><span class="line">    send_timeout 1000;  #默认是60s，服务器传送http响应信息到客户端的超时时间，这个超时仅仅为俩次成功握手后的一个超时，非请求整个响应数据的超时时间，如果在这个超时时间内，客户端没有接收任何数据，链接将被关闭。</span><br><span class="line">    gzip on; #开启gzip</span><br><span class="line">    gzip_disable &quot;msie6&quot;; #IE6不使用gzip</span><br><span class="line">    gzip_vary on; #设置为on会在Header里增加 &quot;Vary: Accept-Encoding&quot;</span><br><span class="line">    gzip_proxied any; #代理结果数据的压缩</span><br><span class="line">    gzip_comp_level 6; #gzip压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值</span><br><span class="line">    gzip_buffers 16 8k; #获取多少内存用于缓存压缩结果</span><br><span class="line">    gzip_http_version 1.1; #识别http协议的版本</span><br><span class="line">    gzip_min_length 1k; #设置允许压缩的页面最小字节数，超过1k的文件会被压缩</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;json text&#x2F;css; #对特定的MIME类型生效,js和css文件会被压缩</span><br><span class="line">    proxy_read_timeout 1240s; #默认值是 60s ，我们可以设置为240s,或者300s。来应对上游服务器处理请求慢的问题</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>conf.d 里面的 *.conf 配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream myServer &#123;</span><br><span class="line">	server  192.168.90.126:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">	server  192.168.90.101:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s ;</span><br><span class="line">	server  192.168.90.102:18848 max_fails&#x3D;1 fail_timeout&#x3D;10s ;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">         listen       8848;</span><br><span class="line">         server_name  192.168.90.126;</span><br><span class="line">         client_max_body_size 1024m;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">		proxy_pass http:&#x2F;&#x2F;myServer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>conf.d 里面的 *.stream 配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># nacos7848.stream</span><br><span class="line">upstream myServer7848 &#123;</span><br><span class="line">    server  192.168.90.126:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:17848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       7848;</span><br><span class="line">    proxy_pass myServer7848;</span><br><span class="line">&#125;</span><br><span class="line"># nacos9848.stream</span><br><span class="line">upstream myServer9848 &#123;</span><br><span class="line">    server  192.168.90.126:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9848;</span><br><span class="line">    proxy_pass myServer9848;</span><br><span class="line">&#125;</span><br><span class="line">#nacos9849.stream</span><br><span class="line">upstream myServer9849 &#123;</span><br><span class="line">    server  192.168.90.126:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.101:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">    server  192.168.90.102:19848 max_fails&#x3D;1 fail_timeout&#x3D;10s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9849;</span><br><span class="line">    proxy_pass myServer9848;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>构建一个脚手架cli</title>
    <url>/2020/12/30/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6cli/</url>
    <content><![CDATA[<h1 id="构建一个脚手"><a href="#构建一个脚手" class="headerlink" title="构建一个脚手"></a>构建一个脚手</h1><p>  记录一下自己构建的一个脚手架cli的步骤，使用node的ssh自动拉取一下文件，并给与用户已反馈！！！！</p>
<h2 id="开始构件准备"><a href="#开始构件准备" class="headerlink" title="开始构件准备"></a>开始构件准备</h2><ol>
<li><p>电脑需要有node</p>
</li>
<li><p>编辑器</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2></li>
<li><p>mkdir 创建一个文件夹 xxx-cli</p>
</li>
<li><p>cd 进入该文件</p>
</li>
<li><p>npm init -y 初始化一个项目</p>
<p>  在package.json 添加入口文件</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">  &quot;xxx-cli&quot;: &quot;.&#x2F;bin&#x2F;index&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mdir bin 在根目录下创建一个bin目录,并创建index文件不要后缀名;并添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定脚本解释器为node</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class="line">console.log(&#39;cli.....&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>在终端执行，npm link;</p>
<p> 就可以通过npm 建立一个link对于bin/index里面的文件；<br> 在终端输入xxx就可以打印里面的文件！</p>
</li>
<li><p>安装依赖</p>
<ul>
<li>commander // node命令行操作</li>
<li>chakl // 打印彩色提示</li>
<li>clear // 清除</li>
<li>download-git-repo // 拉取git模板</li>
<li>handlebars // 语义化模板</li>
<li>inquirer // 终端交互</li>
<li>open // 自动打开浏览器</li>
<li>ora // 加载中</li>
<li>figlet // 字体样式</li>
</ul>
</li>
<li><p>打开bin/index 编写入口</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定脚本解释器为node</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env node</span><br><span class="line">const program &#x3D; require(&#39;commander&#39;); &#x2F;&#x2F; 引入node模板终端</span><br><span class="line">program.version(require(&#39;..&#x2F;package.json&#39;).version); &#x2F;&#x2F; 提示版本</span><br><span class="line">program.usage(&#39;&lt;command&gt; [option]&#39;) &#x2F;&#x2F; 命令提示</span><br><span class="line">  .command(&#39;create &lt;name&gt;&#39;) &#x2F;&#x2F; create &lt;xxx(为变量)&gt; </span><br><span class="line">  .description(&#39;create project&#39;) &#x2F;&#x2F; 描述</span><br><span class="line">  .action(require(&#39;.&#x2F;init.js&#39;)) &#x2F;&#x2F; 加载执行函数</span><br><span class="line">program.parse(process.argv); &#x2F;&#x2F; 传入参数</span><br></pre></td></tr></table></figure></li>
<li><p>建立执行函数 init.js；</p>
<p> 执行逻辑，先打印欢迎信息-在选择模板-下载模板</p>
<ul>
<li>打印欢迎页<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123;promisify&#125; &#x3D; require(&#39;util&#39;) &#x2F;&#x2F; 引入异步函数</span><br><span class="line">const figlet &#x3D; promisify(require(&#39;figlet&#39;)) &#x2F;&#x2F; 打印欢迎页</span><br><span class="line">const clear &#x3D; require(&#39;clear&#39;) &#x2F;&#x2F; 清屏</span><br><span class="line">const chalk &#x3D; require(&#39;chalk&#39;) &#x2F;&#x2F; 粉笔</span><br><span class="line">const log &#x3D; content &#x3D;&gt; console.log(chalk.green(content))</span><br><span class="line">module.exports &#x3D; async name &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 打印欢迎画面</span><br><span class="line">  clear()</span><br><span class="line">  const data &#x3D; await figlet(&#39;XXX Welcome&#39;)</span><br><span class="line">  log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>选择模板这里使用<a href="https://www.npmjs.com/package/inquirer">inquirer</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 构件模板数据</span><br><span class="line"> const presetPrompt &#x3D; &#123; </span><br><span class="line">  name: &#39;preset&#39;, &#x2F;&#x2F; 名字</span><br><span class="line">  type: &#39;list&#39;, &#x2F;&#x2F; 类型</span><br><span class="line">  message: &#96;请选择你要获取的模板类型:&#96;, &#x2F;&#x2F; 描述信息</span><br><span class="line">  choices: [ &#x2F;&#x2F; 选择项</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;vue2.0+ele&#39;, &#x2F;&#x2F; 展示的名字</span><br><span class="line">      value: &#39;vue2.0&#39; &#x2F;&#x2F; 获取的值</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;vue3.0+and-vue&#39;,</span><br><span class="line">      value: &#39;vue3.0&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: &#39;react+and&#39;,</span><br><span class="line">      value: &#39;react&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">const answers &#x3D; await inquirer.prompt (presetPrompt) &#x2F;&#x2F; 将选择模板，对应到终端中</span><br><span class="line">&#x2F;&#x2F; answers.preset 就是模板里面的value</span><br><span class="line">log(&#96;创建$&#123;answers.preset&#125;项目：$&#123;name&#125;&#96;)</span><br><span class="line">&#x2F;&#x2F; 判断preset的值，对应获取下载文件地址</span><br><span class="line">let url &#x3D; &#39;&#39;;</span><br><span class="line">switch (answers.preset) &#123;</span><br><span class="line">  case &#39;vue2.0&#39;:</span><br><span class="line">    url &#x3D; &#39;xxx&#39;;</span><br><span class="line">    break;</span><br><span class="line">  case &#39;vue3.0&#39;:</span><br><span class="line">    url &#x3D; &#39;&#39;;</span><br><span class="line">    break;</span><br><span class="line">  case &#39;react&#39;:</span><br><span class="line">    url &#x3D; &#39;&#39;;</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br><span class="line">if (!url) &#123;</span><br><span class="line">  console.log(chalk.red(&#39;项目正在构件中。。。&#39;));</span><br><span class="line">  return false;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F; 下载模板</span><br><span class="line">let isSuccess &#x3D; await clone(url, name)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>创建download.js,抛出clone方法,使用<a href="https://www.npmjs.com/package/download-git-repo">download-git-repo</a>拉取模板<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; promisify &#125; &#x3D; require(&#39;util&#39;); &#x2F;&#x2F; 引入异步</span><br><span class="line">module.exports.clone &#x3D; async function (repo, desc) &#123;</span><br><span class="line">  const download &#x3D; promisify(require(&#39;download-git-repo&#39;)); &#x2F;&#x2F; 异步使用download-git-repo</span><br><span class="line">  const ora &#x3D; require(&#39;ora&#39;); &#x2F;&#x2F; 打印下载进度</span><br><span class="line">  const process &#x3D; ora(&#96;下载中...&#96;);</span><br><span class="line">  process.start();</span><br><span class="line">  &#x2F;&#x2F; 容错处理</span><br><span class="line">  try &#123;</span><br><span class="line">    await download(repo, desc);</span><br><span class="line">    process.succeed(&#39;下载成功！&#39;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">    process.fail(&#39;下载失败！&#39;);</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>下载完成,打印提示信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isSuccess) &#123;</span><br><span class="line">  log(chalk.green(&#96;</span><br><span class="line">    拉取完成：</span><br><span class="line">    To get Start：</span><br><span class="line">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      cd $&#123;name&#125;</span><br><span class="line">      npm install 或者 yarn add  下载依赖</span><br><span class="line">      npm run dev</span><br><span class="line">    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      &#96;))</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        log(chalk.red(&#96;</span><br><span class="line">    拉取失败：</span><br><span class="line">    请检查网络或稍后再试</span><br><span class="line">      &#96;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>cli</category>
      </categories>
      <tags>
        <tag>cli</tag>
      </tags>
  </entry>
</search>
